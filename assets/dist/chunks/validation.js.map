{"version":3,"file":"validation.js","sources":["../../../../../../node_modules/punycode/punycode.es6.js","../../src/module/validation.ts"],"sourcesContent":["'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","import { useUniDirective } from '../composable';\nimport { getBoundedInstance, html, selectAll, selectOne, trans, useUITheme } from '../service';\nimport { Nullable } from '../types';\nimport { mergeDeep } from '../utilities';\nimport * as punycode from 'punycode';\n\nexport declare type ValidationHandler = (value: any, input: HTMLElement, options?: Record<string, any>, fv?: UnicornFieldValidation) => any;\n\nexport declare type Validator = {\n  handler: ValidationHandler,\n  options?: Record<string, any>;\n};\n\nconst validatorHandlers: Record<string, ValidationHandler> = {};\n\ntype InputElements = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\nexport interface FormValidationOptions {\n  scroll: boolean;\n  validatedClass: null;\n  fieldSelector: null;\n  scrollOffset: number;\n  enabled: boolean;\n}\n\nexport interface FieldValidationOptions {\n  validClass: string;\n  errorSelector: string;\n  inputOptions: boolean;\n  inputOptionsSelector: string;\n  formSelector: string;\n  selector: string;\n  inputOptionsWrapperSelector: string;\n  events: string[];\n  invalidClass: string;\n  errorMessageClass: string;\n}\n\nconst defaultOptions: FormValidationOptions = {\n  scroll: false,\n  scrollOffset: -100,\n  enabled: true,\n  fieldSelector: null,\n  validatedClass: null,\n};\n\nconst defaultFieldOptions: FieldValidationOptions = {\n  formSelector: '[uni-form-validate]',\n  errorSelector: '[data-field-error]',\n  selector: 'input[data-field-input], select[data-field-input], textarea[data-field-input]',\n  validClass: 'is-valid',\n  invalidClass: 'is-invalid',\n  events: ['change'],\n  errorMessageClass: 'invalid-tooltip',\n  inputOptions: false,\n  inputOptionsWrapperSelector: 'div[data-field-input]',\n  inputOptionsSelector: '[data-input-option]'\n};\n\nexport class UnicornFormValidation {\n  presetFields: HTMLElement[] = [];\n\n  static globalValidators: Record<string, Validator> = {};\n\n  validators: Record<string, Validator> = {};\n  options: FormValidationOptions;\n  $form: HTMLElement;\n\n  static is = 'uni-form-validate';\n\n  constructor(el: HTMLElement, options: Partial<FormValidationOptions> = {}) {\n    this.$form = selectOne(el);\n    this.options = this.mergeOptions(options);\n\n    this.registerDefaultValidators();\n\n    this.init();\n  }\n\n  mergeOptions(options: Partial<FormValidationOptions>) {\n    // Fix PHP empty array to JSON issue.\n    if (Array.isArray(options)) {\n      options = {};\n    }\n\n    return this.options = mergeDeep({}, defaultOptions, options);\n  }\n\n  get scrollEnabled() {\n    return this.options.scroll;\n  }\n\n  get scrollOffset() {\n    return Number(this.options.scrollOffset || -100);\n  }\n\n  get fieldSelector() {\n    return this.options.fieldSelector || 'input, select, textarea';\n  }\n\n  get validatedClass() {\n    return this.options.validatedClass || 'was-validated';\n  }\n\n  init() {\n    if (this.$form.tagName === 'FORM') {\n      this.$form.setAttribute('novalidate', 'true');\n      this.$form.addEventListener('submit', (event) => {\n        if (this.options.enabled && !this.validateAll()) {\n          event.stopImmediatePropagation(); // Stop following events\n          event.stopPropagation();\n          event.preventDefault();\n\n          this.$form.dispatchEvent(new CustomEvent('invalid'));\n\n          return false;\n        }\n\n        return true;\n      }, false);\n    }\n\n    this.prepareFields(this.findDOMFields());\n    this.prepareFields(this.presetFields);\n  }\n\n  findDOMFields(): HTMLElement[] {\n    return selectAll(this.$form.querySelectorAll<HTMLElement>(this.fieldSelector));\n  }\n\n  prepareFields(inputs: HTMLElement[]): Promise<void> {\n    inputs.forEach((input) => {\n      this.prepareFieldWrapper(input);\n    });\n\n    // Wait next tick\n    return Promise.resolve();\n  }\n\n  prepareFieldWrapper(input: HTMLElement): HTMLElement | null {\n    if (['INPUT', 'SELECT', 'TEXTAREA'].indexOf(input.tagName) !== -1) {\n      let wrapper: HTMLElement | null = input.closest('[uni-field-validate]');\n\n      if (!wrapper) {\n        wrapper = input.closest('[data-input-container]') || input.parentElement;\n\n        wrapper?.setAttribute('uni-field-validate', '{}');\n      }\n\n      return wrapper;\n    }\n\n    return input;\n  }\n\n  findFields(containsPresets: boolean = true): HTMLElement[] {\n    let inputs = this.findDOMFields();\n\n    if (containsPresets) {\n      inputs.push(...this.presetFields);\n    }\n\n    return inputs.map((input) => this.prepareFieldWrapper(input))\n      .filter(input => input != null) as HTMLElement[];\n  }\n\n  getFieldComponent(input: HTMLElement): UnicornFieldValidation | null {\n    let v = getBoundedInstance(input, 'field.validation');\n\n    if (!v) {\n      const wrapper = input.closest('[uni-field-validate]') as HTMLElement | null;\n\n      if (wrapper) {\n        v = getBoundedInstance(wrapper, 'field.validation');\n      }\n    }\n\n    return v;\n  }\n\n  validateAll(fields?: Nullable<HTMLElement[]>): boolean {\n    this.markFormAsUnvalidated();\n\n    fields = fields || this.findFields();\n    let firstFail: HTMLElement | null = null;\n\n    for (const field of fields) {\n      const fv = this.getFieldComponent(field);\n\n      if (!fv) {\n        continue;\n      }\n\n      const result = fv.checkValidity();\n\n      if (!result && !firstFail) {\n        firstFail = field;\n      }\n    }\n\n    this.markFormAsValidated();\n\n    if (firstFail && this.scrollEnabled) {\n      this.scrollTo(firstFail);\n    }\n\n    return firstFail === null;\n  }\n\n  async validateAllAsync(fields?: Nullable<HTMLElement[]>): Promise<boolean> {\n    this.markFormAsUnvalidated();\n\n    fields = fields || this.findFields();\n    let firstFail: HTMLElement | null = null;\n    const promises: Promise<boolean>[] = [];\n\n    for (const field of fields) {\n      const fv = this.getFieldComponent(field);\n\n      if (!fv) {\n        continue;\n      }\n\n      promises.push(\n        fv.checkValidityAsync().then((result) => {\n          if (!result && !firstFail) {\n            firstFail = field;\n          }\n\n          return result;\n        })\n      );\n    }\n\n    await Promise.all(promises);\n\n    this.markFormAsValidated();\n\n    if (firstFail && this.scrollEnabled) {\n      this.scrollTo(firstFail);\n    }\n\n    return firstFail === null;\n  }\n\n  scrollTo(element: HTMLElement): void {\n    const offset = this.scrollOffset;\n    const elementPosition = element.getBoundingClientRect().top;\n    const offsetPosition = elementPosition + window.scrollY + offset;\n\n    window.scrollTo({\n      top: offsetPosition,\n      behavior: 'smooth'\n    });\n  }\n\n  markFormAsValidated(): void {\n    if (!this.$form) {\n      return;\n    }\n\n    this.$form.classList.add(this.validatedClass);\n  }\n\n  markFormAsUnvalidated(): void {\n    if (!this.$form) {\n      return;\n    }\n\n    this.$form.classList.remove(this.validatedClass);\n  }\n\n  addField(field: HTMLElement): this {\n    this.presetFields.push(field);\n\n    this.prepareFieldWrapper(field);\n\n    return this;\n  }\n\n  registerDefaultValidators(): void {\n    for (let name in validatorHandlers) {\n      this.addValidator(name, validatorHandlers[name]);\n    }\n  }\n\n  /**\n   * Add validator handler.\n   */\n  addValidator(name: string, handler: ValidationHandler, options: Record<string, any> = {}) {\n    options = options || {};\n\n    this.validators[name] = {\n      handler,\n      options\n    };\n\n    return this;\n  }\n\n  /**\n   * Add validator handler.\n   */\n  static addGlobalValidator(name: string, handler: ValidationHandler, options: Record<string, any> = {}) {\n    options = options || {};\n\n    this.globalValidators[name] = {\n      handler,\n      options\n    };\n\n    return this;\n  }\n}\n\nexport class UnicornFieldValidation {\n  $input: InputElements | undefined;\n  options: FieldValidationOptions;\n\n  static is = 'uni-field-validate';\n\n  constructor(protected el: HTMLElement, options: Partial<FieldValidationOptions> = {}) {\n    this.options = this.mergeOptions(options);\n\n    this.$input = this.selectInput();\n\n    this.init();\n  }\n\n  mergeOptions(options: Partial<FieldValidationOptions>) {\n    // Fix PHP empty array to JSON issue.\n    if (Array.isArray(options)) {\n      options = {};\n    }\n\n    return this.options = mergeDeep({}, defaultFieldOptions, options);\n  }\n\n  get $form(): HTMLFormElement {\n    return this.getForm();\n  }\n\n  get errorSelector(): string {\n    return this.options.errorSelector;\n  }\n\n  get selector(): string {\n    return this.options.selector;\n  }\n\n  get validClass(): string {\n    return this.options.validClass;\n  }\n\n  get invalidClass(): string {\n    return this.options.invalidClass;\n  }\n\n  get isVisible(): boolean {\n    return !!(this.el.offsetWidth || this.el.offsetHeight || this.el.getClientRects().length);\n  }\n\n  get isInputOptions(): boolean {\n    return Boolean(this.options.inputOptions);\n  }\n\n  get validationMessage(): string {\n    return this.$input?.validationMessage || '';\n  }\n\n  get validity(): ValidityState | undefined {\n    return this.$input?.validity;\n  }\n\n  selectInput(): InputElements | undefined {\n    let selector = this.selector;\n\n    if (this.options.inputOptions) {\n      selector += ', ' + this.options.inputOptionsWrapperSelector;\n    }\n\n    let input = this.el.querySelector<InputElements>(selector);\n\n    if (!input) {\n      input = this.el.querySelector<InputElements>('input, select, textarea');\n    }\n\n    if (!input) {\n      return undefined;\n    }\n\n    return this.$input = input;\n  }\n\n  init() {\n    this.selectInput();\n\n    this.bindEvents();\n\n    this.prepareWrapper();\n\n    if (this.isInputOptions) {\n      const $input = this.$input as any;\n\n      if (\n        !($input instanceof HTMLInputElement)\n        && !($input instanceof HTMLSelectElement)\n        && !($input instanceof HTMLTextAreaElement)\n      ) {\n        $input.validationMessage = '';\n\n        $input.setCustomValidity = (msg: string) => {\n          $input.validationMessage = String(msg);\n        };\n\n        $input.checkValidity = () => {\n          return this.checkInputOptionsValidity();\n        };\n      }\n    }\n  }\n\n  bindEvents() {\n    if (!this.$input) {\n      return;\n    }\n\n    this.$input.addEventListener('invalid', (e) => {\n      this.showInvalidResponse();\n    });\n\n    const events = this.options.events;\n\n    events.forEach((eventName) => {\n      this.$input?.addEventListener(eventName, () => {\n        this.checkValidity();\n      });\n    });\n  }\n\n  prepareWrapper() {\n    if (this.el.querySelector(this.errorSelector)?.classList?.contains('invalid-tooltip')) {\n      if (window.getComputedStyle(this.el).position === 'static') {\n        this.el.style.position = 'relative';\n      }\n    }\n  }\n\n  checkValidity() {\n    if (!this.$input) {\n      return true;\n    }\n\n    if (this.$input.hasAttribute('readonly')) {\n      return true;\n    }\n\n    if (this.$input.hasAttribute('[data-novalidate]')) {\n      return true;\n    }\n\n    if (this.$input.closest('[data-novalidate]')) {\n      return true;\n    }\n\n    this.$input.setCustomValidity('');\n    let valid = this.$input.checkValidity();\n\n    if (valid && this.$form) {\n      valid = this.runCustomValidity();\n    }\n\n    // Raise invalid event\n    // this.$input.checkValidity();\n\n    this.updateValidClass(valid);\n\n    return valid;\n  }\n\n  runCustomValidity() {\n    if (!this.$input) {\n      return true;\n    }\n\n    // Check custom validity\n    const validates = (this.$input.getAttribute('data-validate') || '').split('|');\n    let result = true;\n\n    if (this.$input.value !== '' && validates.length) {\n      if (!this.checkCustomDataAttributeValidity()) {\n        return false;\n      }\n\n      for (const validatorName of validates) {\n        const [validator, options] = this.getValidator(validatorName) || [null, {}];\n\n        if (!validator) {\n          continue;\n        }\n\n        Object.assign(options, validator.options);\n\n        let r = validator.handler(this.$input.value, this.$input, options, this);\n\n        // If return is a promise, push to stack and resolve later\n        if (r instanceof Promise || (typeof r === 'object' && r.then)) {\n          r.then((result: boolean) => {\n            this.handleAsyncCustomResult(result, validator);\n          });\n          continue;\n        }\n\n        if (!this.handleCustomResult(r, validator)) {\n          result = false;\n\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  async checkValidityAsync() {\n    if (!this.$input) {\n      return true;\n    }\n\n    if (this.$input.hasAttribute('readonly')) {\n      return true;\n    }\n\n    this.$input.setCustomValidity('');\n    let valid = this.$input.checkValidity();\n\n    if (valid && this.$form) {\n      valid = await this.runCustomValidityAsync();\n    }\n\n    this.updateValidClass(valid);\n\n    return valid;\n  }\n\n  async runCustomValidityAsync(): Promise<boolean> {\n    if (!this.$input) {\n      return true;\n    }\n\n    // Check custom validity\n    const validates = (this.$input.getAttribute('data-validate') || '').split('|');\n\n    const results: Array<boolean | string | undefined> = [];\n    const promises: Promise<boolean>[] = [];\n\n    if (this.$input.value !== '' && validates.length) {\n      if (!this.checkCustomDataAttributeValidity()) {\n        return false;\n      }\n\n      for (const validatorName of validates) {\n        let [validator, options] = this.getValidator(validatorName) || [null, {}];\n\n        if (!validator) {\n          continue;\n        }\n\n        options = Object.assign({}, options, validator.options || {});\n\n        promises.push(\n          Promise.resolve(validator.handler(this.$input.value, this.$input, options, this))\n            .then((r) => {\n              results.push(this.handleAsyncCustomResult(r, validator));\n\n              return r;\n            })\n        );\n      }\n    }\n\n    await Promise.all(promises);\n\n    for (const result of results) {\n      if (result === false) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  checkCustomDataAttributeValidity(): boolean {\n    const error = this.$input?.dataset.validationFail;\n\n    return this.handleCustomResult(error);\n  }\n\n  checkInputOptionsValidity(): boolean {\n    if (!this.$input) {\n      return true;\n    }\n\n    const isRequired = this.$input.getAttribute('required') != null;\n    const optionWrappers = this.$input.querySelectorAll(this.options.inputOptionsSelector);\n    let result = true;\n\n    if (isRequired) {\n      for (const optionWrapper of optionWrappers) {\n        const input = optionWrapper.querySelector('input');\n\n        result = false;\n\n        // Only need one checked\n        if (input?.checked) {\n          result = true;\n          break;\n        }\n      }\n    }\n\n    // Get browser input validation message\n    const n = document.createElement('input');\n    n.required = isRequired;\n\n    if (result) {\n      n.value = 'placeholder';\n    }\n\n    n.checkValidity();\n\n    (this.$input as any).validationMessage = n.validationMessage;\n    (this.$input as any).validity = n.validity;\n\n    for (const optionWrapper of optionWrappers) {\n      const input = optionWrapper.querySelector<HTMLInputElement>('input');\n\n      input?.setCustomValidity(n.validationMessage);\n    }\n\n    if (!result) {\n      this.$input.dispatchEvent(\n        new CustomEvent('invalid')\n      );\n    }\n\n    return result;\n  }\n\n  /**\n   * @param valid {boolean}\n   */\n  updateValidClass(valid: Boolean) {\n    const $errorElement = this.getErrorElement();\n    const $invalidTarget = $errorElement?.previousElementSibling;\n\n    this.$input?.classList.remove(this.invalidClass);\n    this.$input?.classList.remove(this.validClass);\n    this.el.classList.remove(this.invalidClass);\n    this.el.classList.remove(this.validClass);\n    $invalidTarget?.classList.remove(this.invalidClass);\n    $invalidTarget?.classList.remove(this.validClass);\n\n    if (valid) {\n      this.$input?.classList.add(this.validClass);\n      this.el.classList.add(this.validClass);\n\n      $invalidTarget?.classList.add(this.validClass);\n    } else {\n      this.$input?.classList.add(this.invalidClass);\n      this.el.classList.add(this.invalidClass);\n\n      $invalidTarget?.classList.add(this.invalidClass);\n    }\n  }\n\n  getFormValidation(element?: Nullable<HTMLFormElement>): UnicornFormValidation | null {\n    return getBoundedInstance(element || this.getForm(), 'form.validation')!;\n  }\n\n  getValidator(name: string): [Validator, Record<string, any>] | null {\n    const matches = name.match(/(?<type>[\\w\\-_]+)(\\((?<params>.*)\\))*/);\n\n    if (!matches) {\n      return null;\n    }\n\n    const validatorName = matches.groups?.type || '';\n\n    const params = matches.groups?.params || '';\n\n    const fv = this.getFormValidation(this.$form!);\n    const validator = fv?.validators[validatorName] || UnicornFormValidation.globalValidators[validatorName];\n\n    if (!validator) {\n      return null;\n    }\n\n    const paramMatches = params.matchAll(/(?<key>\\w+)(\\s?[=:]\\s?(?<value>\\w+))?/g);\n    const options: Record<string, string> = {};\n\n    for (const paramMatch of paramMatches) {\n      const match = paramMatch?.groups as {\n        key: string;\n        value: string;\n      } | undefined;\n\n      if (!match) {\n        continue;\n      }\n\n      options[match.key] = handleParamValue(match.value);\n    }\n\n    return [ validator, options ];\n  }\n\n  handleCustomResult(result: boolean | string | undefined, validator?: Nullable<Validator>): boolean {\n    if (typeof result === 'string') {\n      this.$input?.setCustomValidity(result);\n      result = result === '';\n    } else if (result === undefined) {\n      result = true;\n    }\n\n    if (result) {\n      this.$input?.setCustomValidity('');\n    } else if (validator) {\n      this.raiseCustomErrorState(validator);\n    }\n\n    return result;\n  }\n\n  handleAsyncCustomResult(result: boolean, validator?: Nullable<Validator>): boolean {\n    result = this.handleCustomResult(result, validator);\n\n    // Fire invalid events\n    this.$input?.checkValidity();\n\n    this.updateValidClass(result);\n\n    return result;\n  }\n\n  raiseCustomErrorState(validator: Validator): void {\n    let help;\n\n    if (this.$input?.validationMessage === '') {\n      help = validator.options?.notice;\n\n      if (typeof help === 'function') {\n        help = help(this.$input, this);\n      }\n\n      if (help != null) {\n        this.$input?.setCustomValidity(help);\n      }\n    }\n\n    if (this.$input?.validationMessage === '') {\n      this.$input?.setCustomValidity(trans('unicorn.message.validation.custom.error'));\n    }\n\n    this.$input?.dispatchEvent(\n      new CustomEvent('invalid')\n    );\n  }\n\n  setAsInvalidAndReport(error: string) {\n    this.setCustomValidity(error);\n    this.showInvalidResponse();\n  }\n\n  setCustomValidity(error: string) {\n    this.$input?.setCustomValidity(error);\n  }\n\n  reportValidity() {\n    if (this.validationMessage !== '') {\n      this.showInvalidResponse();\n    }\n  }\n\n  showInvalidResponse() {\n    /** @type ValidityState */\n    const state = this.$input?.validity;\n    let message: string = this.$input?.validationMessage || '';\n\n    for (let key in state) {\n      if (state[(key as keyof ValidityState)] && this.$input?.dataset[key + 'Message']) {\n        message = this.$input?.dataset[key + 'Message'] || '';\n        break;\n      }\n    }\n\n    if (!this.isVisible) {\n      let title = this.findLabel()?.textContent;\n\n      if (!title) {\n        title = this.$input?.name || '';\n      }\n\n      useUITheme().renderMessage(\n        `Field: ${title} - ${message}`,\n        'warning'\n      );\n    }\n\n    let $help = this.getErrorElement();\n\n    if (!$help) {\n      $help = this.createHelpElement()!;\n      this.el.appendChild($help);\n      this.prepareWrapper();\n    }\n\n    $help.textContent = message;\n\n    this.updateValidClass(false);\n  }\n\n  getErrorElement() {\n    return this.el.querySelector(this.errorSelector);\n  }\n\n  createHelpElement() {\n    const className = this.options.errorMessageClass;\n    const parsed = this.parseSelector(this.errorSelector || '');\n\n    const $help = html(`<div class=\"${className}\"></div>`)!;\n\n    $help.classList.add(...parsed.classes);\n\n    parsed.attrs.forEach((attr) => {\n      $help.setAttribute(attr[0], attr[1] || '');\n    });\n\n    parsed.ids.forEach((id) => {\n      $help.id = id;\n    });\n\n    return $help;\n  }\n\n  /**\n   * @see https://stackoverflow.com/a/17888178\n   */\n  parseSelector(subselector: string): { tags: string[]; classes: string[]; ids: string[]; attrs: string[][] } {\n    const obj: {\n      tags: string[];\n      classes: string[];\n      ids: string[];\n      attrs: string[][];\n    } = { tags: [], classes: [], ids: [], attrs: [] };\n    for (const token of subselector.split(/(?=\\.)|(?=#)|(?=\\[)/)) {\n      switch (token[0]) {\n        case '#':\n          obj.ids.push(token.slice(1));\n          break;\n        case '.':\n          obj.classes.push(token.slice(1));\n          break;\n        case '[':\n          obj.attrs.push(token.slice(1, -1).split('='));\n          break;\n        default :\n          obj.tags.push(token);\n          break;\n      }\n    }\n    return obj;\n  }\n\n  setAsValidAndClearResponse() {\n    this.setCustomValidity('');\n    this.updateValidClass(true);\n    this.clearInvalidResponse();\n  }\n\n  clearInvalidResponse() {\n    const $help = this.el.querySelector(this.errorSelector)!;\n\n    $help.textContent = '';\n  }\n\n  getForm() {\n    return this.el.closest(this.options.formSelector || '[uni-form-validate]') as HTMLFormElement;\n  }\n\n  findLabel() {\n    const id = this.$input?.id || '';\n\n    const wrapper = this.$input?.closest('[data-field-wrapper]');\n    let label = null;\n\n    if (wrapper) {\n      label = wrapper.querySelector('[data-field-label]');\n    }\n\n    if (!label) {\n      label = document.querySelector(`label[for=\"${id}\"]`);\n    }\n\n    return label;\n  }\n}\n\nfunction camelTo(str: string, sep: string) {\n  return str.replace(/([a-z])([A-Z])/g, `$1${sep}$2`).toLowerCase();\n}\n\nvalidatorHandlers.username = function (value: any, element: HTMLElement) {\n  const regex = new RegExp('[\\<|\\>|\"|\\'|\\%|\\;|\\(|\\)|\\&]', 'i');\n  return !regex.test(value);\n};\n\nvalidatorHandlers.numeric = function (value: any, element: HTMLElement) {\n  const regex = /^(\\d|-)?(\\d|,)*\\.?\\d*$/;\n  return regex.test(value);\n};\n\nvalidatorHandlers.email = function (value: any, element: HTMLElement) {\n  value = punycode.toASCII(value);\n  const regex = /^[a-zA-Z0-9.!#$%&â€™*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n  return regex.test(value);\n};\n\nvalidatorHandlers.url = function (value: any, element: HTMLElement) {\n  const regex = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/i;\n  return regex.test(value);\n};\n\nvalidatorHandlers.alnum = function (value: any, element: HTMLElement) {\n  const regex = /^[a-zA-Z0-9]*$/;\n  return regex.test(value);\n};\n\nvalidatorHandlers.color = function (value: any, element: HTMLElement) {\n  const regex = /^#(?:[0-9a-f]{3}){1,2}$/;\n  return regex.test(value);\n};\n\n/**\n * @see  http://www.virtuosimedia.com/dev/php/37-tested-php-perl-and-javascript-regular-expressions\n */\nvalidatorHandlers.creditcard = function (value: any, element: HTMLElement) {\n  const regex = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6011[0-9]{12}|622((12[6-9]|1[3-9][0-9])|([2-8][0-9][0-9])|(9(([0-1][0-9])|(2[0-5]))))[0-9]{10}|64[4-9][0-9]{13}|65[0-9]{14}|3(?:0[0-5]|[68][0-9])[0-9]{11}|3[47][0-9]{13})*$/;\n  return regex.test(value);\n};\n\nvalidatorHandlers.ip = function (value: any, element: HTMLElement) {\n  const regex = /^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$/;\n  return regex.test(value);\n};\n\nvalidatorHandlers['password-confirm'] = function (value: any, element: HTMLElement) {\n  const selector = element.dataset.confirmTarget;\n\n  if (!selector) {\n    throw new Error('Validator: \"password-confirm\" must add \"data-confirm-target\" attribute.');\n  }\n\n  const target = document.querySelector<HTMLInputElement>(selector);\n\n  return target?.value === value;\n};\n\nexport { validatorHandlers as validators };\n\n// customElements.define(UnicornFormValidateElement.is, UnicornFormValidateElement);\n// customElements.define(UnicornFieldValidateElement.is, UnicornFieldValidateElement);\n\nexport const ready = Promise.all([\n  useUniDirective('form-validate', {\n    mounted(el, binding) {\n      getBoundedInstance(el, 'form.validation', (ele) => {\n        return new UnicornFormValidation(ele as HTMLElement, JSON.parse(binding.value || '{}'));\n      });\n    },\n    updated(el, binding) {\n      const instance = getBoundedInstance<UnicornFormValidation>(el, 'form.validation');\n      instance.mergeOptions(JSON.parse(binding.value || '{}'));\n    }\n  }),\n\n  useUniDirective('field-validate', {\n    mounted(el, binding) {\n      getBoundedInstance<UnicornFieldValidation>(el, 'field.validation', (ele) => {\n        return new UnicornFieldValidation(ele as HTMLElement, JSON.parse(binding.value || '{}'));\n      });\n    },\n\n    updated(el, binding) {\n      const instance = getBoundedInstance<UnicornFieldValidation>(el, 'field.validation');\n      instance.mergeOptions(JSON.parse(binding.value || '{}') || {});\n    }\n  })\n]);\n\nfunction handleParamValue(value: any) {\n  if (!isNaN(Number(value))) {\n    return Number(value);\n  }\n\n  if (value === 'null') {\n    return null;\n  }\n\n  if (value === 'true') {\n    return true;\n  }\n\n  if (value === 'false') {\n    return true;\n  }\n\n  return value;\n}\n\nexport interface ValidationModule {\n  UnicornFormValidation: typeof UnicornFormValidation;\n  UnicornFieldValidation: typeof UnicornFieldValidation;\n  ready: Promise<any>;\n  validators: typeof validatorHandlers;\n}\n"],"names":["result","error","punycode.toASCII"],"mappings":"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","x_google_ignoreList":[0]}