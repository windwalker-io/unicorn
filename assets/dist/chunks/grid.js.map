{"version":3,"file":"grid.js","sources":["../../src/module/grid.ts"],"sourcesContent":["import { __, deleteConfirm, h, loadAlpine, simpleAlert, simpleConfirm, slideDown, slideUp } from '../service';\nimport { Nullable } from '../types';\nimport type { UnicornFormElement } from './form';\n\nexport class UnicornGridElement {\n  options: Record<string, any>;\n  ordering = '';\n  state = {};\n\n  constructor(\n    selector: string,\n    public element: HTMLElement,\n    public form: UnicornFormElement,\n    options: Record<string, any> = {}\n  ) {\n    this.options = { ...options };\n\n    this.bindEvents();\n  }\n\n  bindEvents() {\n    const inputs = this.element.querySelectorAll<HTMLInputElement>('input[data-role=grid-checkbox]');\n\n    for (const ch of inputs) {\n      ch.addEventListener('click', () => {\n        ch.dispatchEvent(new CustomEvent('change'));\n      });\n      ch.addEventListener('change', () => {\n        const event = new CustomEvent('unicorn:checked', {\n          detail: { grid: this }\n        });\n\n        this.form.element?.dispatchEvent(event);\n      });\n    }\n  }\n\n  initComponent(store = 'grid', custom: Record<string, string> = {}) {\n    this.ordering = this.element?.dataset?.ordering || '';\n\n    if (this.ordering) {\n      if (!this.ordering.toLowerCase().endsWith(' asc')\n        && !this.ordering.toLowerCase().endsWith(' desc')) {\n        this.ordering += ' ASC';\n      }\n    }\n\n    return loadAlpine((Alpine) => {\n      Alpine.store(store, this.useState(custom));\n    });\n  }\n\n  useState(this: any, custom: Record<string, any> = {}) {\n    const state: Partial<Record<string, any>> = {\n      form: this.form.useState(custom),\n    };\n\n    Object.getOwnPropertyNames(Object.getPrototypeOf(this))\n      .map(item => {\n        const prop = this[item];\n\n        if (typeof prop === 'function') {\n          return state[item] = this[item].bind(this);\n        }\n\n        return item;\n      });\n\n    return Object.assign(\n      state,\n      custom\n    );\n  }\n\n  getElement() {\n    return this.element;\n  }\n\n  sendFilter($event?: Event, method?: string) {\n    if ($event) {\n      $event.preventDefault();\n    }\n\n    this.form.submit(null, null, method);\n  }\n\n  clearFilters(element: HTMLElement, method?: Nullable<string>): void {\n    element.querySelectorAll('input, textarea, select').forEach((ele) => {\n      (ele as HTMLInputElement).value = '';\n    });\n\n    this.form.submit(null, null, method);\n  }\n\n  async toggleFilters(open: boolean, filterForm: HTMLElement) {\n    if (open) {\n      await slideDown(filterForm);\n    } else {\n      await slideUp(filterForm);\n    }\n  }\n\n  sort($el: HTMLElement): boolean {\n    const dir = this.getDirection($el);\n\n    const field = $el.dataset.field;\n    let asc = $el.dataset.asc;\n    let desc = $el.dataset.desc;\n\n    if (field) {\n      asc = field + ' ASC';\n      desc = field + ' DESC';\n    }\n\n    if (dir === 'ASC') {\n      return this.sortBy(desc);\n    }\n\n    return this.sortBy(asc);\n  }\n\n  /**\n   * Sort two items.\n   */\n  sortBy(ordering: Nullable<string>): boolean {\n    if (!ordering) {\n      return false;\n    }\n\n    let orderingInput = this.element.querySelector<HTMLInputElement>('input[name=list_ordering]');\n\n    if (!orderingInput) {\n      orderingInput = h('input', { name: 'list_ordering', type: 'hidden', value: '' });\n\n      this.element.appendChild(orderingInput);\n    }\n\n    orderingInput.value = ordering;\n\n    return this.form.put();\n  }\n\n  isSortActive($el: HTMLElement): boolean {\n    return this.getDirection($el) != null;\n  }\n\n  getDirection($el: HTMLElement): \"ASC\" | \"DESC\" | null {\n    const field = $el.dataset.field;\n    let asc = $el.dataset.asc;\n    let desc = $el.dataset.desc;\n\n    if (field) {\n      asc = field + ' ASC';\n      desc = field + ' DESC';\n    }\n\n    if (this.orderingEquals(asc, this.ordering)) {\n      return 'ASC';\n    } else if (this.orderingEquals(desc, this.ordering)) {\n      return 'DESC';\n    }\n\n    return null;\n  }\n\n  orderingEquals(a: Nullable<string>, b: Nullable<string>): boolean {\n    a = a || '';\n    b = b || '';\n\n    a = a.replace(/\\s+/g, ' ').trim().toLowerCase();\n    b = b.replace(/\\s+/g, ' ').trim().toLowerCase();\n\n    return a === b;\n  }\n\n  /**\n   * Check a row's checkbox.\n   */\n  checkRow(row: number, value = true): void {\n    const ch = this.getCheckboxByRow(row);\n\n    if (!ch) {\n      throw new Error('Checkbox of row: ' + row + ' not found.');\n    }\n\n    ch.checked = value;\n    ch.dispatchEvent(new Event('input'));\n    ch.dispatchEvent(new Event('change'));\n  }\n\n  getCheckboxByRow(row: number): Nullable<HTMLInputElement> {\n    return this.form.element?.querySelector<HTMLInputElement>(\n      `input[data-role=grid-checkbox][data-row-number=\"${row}\"]`\n    );\n  }\n\n  /**\n   * Update a row.\n   */\n  updateRow(row: number, url?: Nullable<string>, data?: Nullable<Record<string, any>>) {\n    const ch = this.getCheckboxByRow(row);\n\n    if (!ch) {\n      return false;\n    }\n\n    return this.updateItem(ch.value, url, data);\n  }\n\n  /**\n   * Update an item by id.\n   */\n  updateItem(id: string | number, url?: Nullable<string>, data?: Nullable<Record<string, any>>): boolean {\n    this.toggleAll(false);\n\n    this.disableAllCheckboxes();\n\n    this.form.injectInput('id[]', id);\n\n    return this.form.patch(url, data);\n  }\n\n  /**\n   * Update a item with batch task.\n   */\n  updateItemByTask(\n    task: string,\n    id: string | number,\n    url?: Nullable<string>,\n    data?: Nullable<Record<string, any>>\n  ): boolean {\n    data = data || {};\n    data.task = task;\n\n    return this.updateItem(id, url, data);\n  }\n\n  /**\n   * @deprecated  Use updateItemByTask() instead.\n   */\n  doTask(task: string, id: number | string, url?: Nullable<string>, data?: Nullable<Record<string, any>>): boolean {\n    return this.updateItemByTask(task, id, url, data);\n  }\n\n  /**\n   * Update a row with batch task.\n   */\n  updateRowByTask(task: string, row: number, url?: Nullable<string>, data?: Nullable<Record<string, any>>): boolean {\n    const ch = this.getCheckboxByRow(row);\n\n    if (!ch) {\n      return false;\n    }\n\n    return this.updateItemByTask(task, ch.value, url, data);\n  }\n\n  /**\n   * Batch update items.\n   */\n  updateListByTask(task: string, url?: Nullable<string>, data?: Nullable<Record<string, any>>): boolean {\n    data = data || {};\n    data.task = task;\n\n    return this.form.patch(url, data);\n  }\n\n  /**\n   * Copy a row.\n   */\n  copyItem(id: string | number, url?: Nullable<string>, data?: Nullable<Record<string, any>>): boolean {\n    this.toggleAll(false);\n\n    this.disableAllCheckboxes();\n\n    this.form.injectInput('id[]', id);\n\n    return this.form.post(url, data);\n  }\n\n  /**\n   * Copy a row.\n   */\n  copyRow(row: number, url?: Nullable<string>, data?: Nullable<Record<string, any>>): boolean {\n    const ch = this.getCheckboxByRow(row);\n\n    if (!ch) {\n      return false;\n    }\n\n    return this.copyItem(ch.value, url, data);\n  }\n\n  /**\n   * Delete checked items.\n   */\n  deleteList(\n    message?: Nullable<string> | false,\n    url?: Nullable<string>,\n    data?: Nullable<Record<string, any>>\n  ): boolean {\n    if (!this.validateChecked()) {\n      return false;\n    }\n\n    message = message == null ? __('unicorn.message.delete.confirm') : message;\n\n    if (message !== false) {\n      simpleConfirm(message).then(isConfirm => {\n        if (isConfirm) {\n          this.form.delete(url, data);\n        }\n      });\n    } else {\n      this.form.delete(url, data);\n    }\n\n    return true;\n  }\n\n  /**\n   * Delete an item by row.\n   */\n  async deleteRow(row: number,\n                  msg?: Nullable<string>,\n                  url?: Nullable<string>,\n                  data?: Nullable<Record<string, any>>): Promise<boolean> {\n    const ch = this.getCheckboxByRow(row);\n\n    if (!ch) {\n      return false;\n    }\n\n    return this.deleteItem(ch.value, msg, url, data);\n  }\n\n  /**\n   * Delete an item.\n   */\n  async deleteItem(id: string,\n                   msg?: Nullable<string>,\n                   url?: Nullable<string>,\n                   data?: Nullable<Record<string, any>>): Promise<boolean> {\n    msg = msg || __('unicorn.message.delete.confirm');\n\n    const isConfirm = await deleteConfirm(msg);\n\n    if (isConfirm) {\n      // this.toggleAll(false);\n      // this.checkRow(row);\n      data = data || {};\n\n      data.id = id;\n\n      this.form.delete(url, data);\n    }\n\n    return isConfirm;\n  }\n\n  /**\n   * Toggle all checkboxes.\n   */\n  toggleAll(value: boolean) {\n    Array.from(\n      this.element.querySelectorAll<HTMLInputElement>('input[data-role=grid-checkbox][type=checkbox]')\n    )\n      .forEach((input) => {\n        input.checked = value;\n\n        input.dispatchEvent(new CustomEvent('input'));\n        input.dispatchEvent(new CustomEvent('change'));\n      });\n\n    return this;\n  }\n\n  disableAllCheckboxes() {\n    Array.from(\n      this.element.querySelectorAll<HTMLInputElement>('input[data-role=grid-checkbox][type=checkbox]')\n    )\n      .forEach((input) => {\n        input.disabled = true;\n      });\n  }\n\n  /**\n   * Count checked checkboxes.\n   */\n  countChecked(): number {\n    return this.getChecked().length;\n  }\n\n  /**\n   * Get Checked boxes.\n   */\n  getChecked(): HTMLInputElement[] {\n    return Array.from(\n      this.element.querySelectorAll<HTMLInputElement>('input[data-role=grid-checkbox][type=checkbox]:checked')\n    );\n  }\n\n  getCheckedValues(): string[] {\n    return this.getChecked().map(input => input.value);\n  }\n\n  /**\n   * Validate there has one or more checked boxes.\n   */\n  validateChecked(event?: Event, callback?: (grid: UnicornGridElement) => any, msg?: string): this {\n    msg = msg || __('unicorn.message.grid.checked');\n\n    if (!this.hasChecked()) {\n      if (msg !== '') {\n        simpleAlert(msg);\n      }\n\n      if (event) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n\n      return this;\n    }\n\n    if (callback) {\n      callback(this);\n    }\n\n    return this;\n  }\n\n  hasChecked(): boolean {\n    return this.countChecked() > 0;\n  }\n\n  /**\n   * Reorder all.\n   */\n  reorderAll(url?: Nullable<string>, data?: Nullable<Record<string, any>>) {\n    return this.updateListByTask('reorder', url, data);\n  }\n\n  /**\n   * Reorder items.\n   */\n  moveItem(id: number | string, delta: number, url?: Nullable<string>, data?: Nullable<Record<string, any>>): boolean {\n    data = data || {};\n    data.delta = delta;\n\n    return this.updateItemByTask('move', id, url, data);\n  }\n\n  moveUp(id: string | number, url?: Nullable<string>, data?: Nullable<Record<string, any>>): boolean {\n    return this.moveItem(id, -1, url, data);\n  }\n\n  moveDown(id: string | number, url?: Nullable<string>, data?: Nullable<Record<string, any>>): boolean {\n    return this.moveItem(id, 1, url, data);\n  }\n\n  getId(suffix = '') {\n    return this.form.element?.id + suffix;\n  }\n}\n"],"names":[],"mappings":";AAIO,MAAM,mBAAmB;AAAA,EAK9B,YACE,UACO,SACA,MACP,UAA+B,CAAA,GAC/B;AAHO,SAAA,UAAA;AACA,SAAA,OAAA;AAGP,SAAK,UAAU,EAAE,GAAG,QAAA;AAEpB,SAAK,WAAA;AAAA,EACP;AAAA,EAbA;AAAA,EACA,WAAW;AAAA,EACX,QAAQ,CAAA;AAAA,EAaR,aAAa;AACX,UAAM,SAAS,KAAK,QAAQ,iBAAmC,gCAAgC;AAE/F,eAAW,MAAM,QAAQ;AACvB,SAAG,iBAAiB,SAAS,MAAM;AACjC,WAAG,cAAc,IAAI,YAAY,QAAQ,CAAC;AAAA,MAC5C,CAAC;AACD,SAAG,iBAAiB,UAAU,MAAM;AAClC,cAAM,QAAQ,IAAI,YAAY,mBAAmB;AAAA,UAC/C,QAAQ,EAAE,MAAM,KAAA;AAAA,QAAK,CACtB;AAED,aAAK,KAAK,SAAS,cAAc,KAAK;AAAA,MACxC,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,cAAc,QAAQ,QAAQ,SAAiC,CAAA,GAAI;AACjE,SAAK,WAAW,KAAK,SAAS,SAAS,YAAY;AAEnD,QAAI,KAAK,UAAU;AACjB,UAAI,CAAC,KAAK,SAAS,YAAA,EAAc,SAAS,MAAM,KAC3C,CAAC,KAAK,SAAS,YAAA,EAAc,SAAS,OAAO,GAAG;AACnD,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAEA,WAAO,WAAW,CAAC,WAAW;AAC5B,aAAO,MAAM,OAAO,KAAK,SAAS,MAAM,CAAC;AAAA,IAC3C,CAAC;AAAA,EACH;AAAA,EAEA,SAAoB,SAA8B,IAAI;AACpD,UAAM,QAAsC;AAAA,MAC1C,MAAM,KAAK,KAAK,SAAS,MAAM;AAAA,IAAA;AAGjC,WAAO,oBAAoB,OAAO,eAAe,IAAI,CAAC,EACnD,IAAI,CAAA,SAAQ;AACX,YAAM,OAAO,KAAK,IAAI;AAEtB,UAAI,OAAO,SAAS,YAAY;AAC9B,eAAO,MAAM,IAAI,IAAI,KAAK,IAAI,EAAE,KAAK,IAAI;AAAA,MAC3C;AAEA,aAAO;AAAA,IACT,CAAC;AAEH,WAAO,OAAO;AAAA,MACZ;AAAA,MACA;AAAA,IAAA;AAAA,EAEJ;AAAA,EAEA,aAAa;AACX,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,WAAW,QAAgB,QAAiB;AAC1C,QAAI,QAAQ;AACV,aAAO,eAAA;AAAA,IACT;AAEA,SAAK,KAAK,OAAO,MAAM,MAAM,MAAM;AAAA,EACrC;AAAA,EAEA,aAAa,SAAsB,QAAiC;AAClE,YAAQ,iBAAiB,yBAAyB,EAAE,QAAQ,CAAC,QAAQ;AAClE,UAAyB,QAAQ;AAAA,IACpC,CAAC;AAED,SAAK,KAAK,OAAO,MAAM,MAAM,MAAM;AAAA,EACrC;AAAA,EAEA,MAAM,cAAc,MAAe,YAAyB;AAC1D,QAAI,MAAM;AACR,YAAM,UAAU,UAAU;AAAA,IAC5B,OAAO;AACL,YAAM,QAAQ,UAAU;AAAA,IAC1B;AAAA,EACF;AAAA,EAEA,KAAK,KAA2B;AAC9B,UAAM,MAAM,KAAK,aAAa,GAAG;AAEjC,UAAM,QAAQ,IAAI,QAAQ;AAC1B,QAAI,MAAM,IAAI,QAAQ;AACtB,QAAI,OAAO,IAAI,QAAQ;AAEvB,QAAI,OAAO;AACT,YAAM,QAAQ;AACd,aAAO,QAAQ;AAAA,IACjB;AAEA,QAAI,QAAQ,OAAO;AACjB,aAAO,KAAK,OAAO,IAAI;AAAA,IACzB;AAEA,WAAO,KAAK,OAAO,GAAG;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,UAAqC;AAC1C,QAAI,CAAC,UAAU;AACb,aAAO;AAAA,IACT;AAEA,QAAI,gBAAgB,KAAK,QAAQ,cAAgC,2BAA2B;AAE5F,QAAI,CAAC,eAAe;AAClB,sBAAgB,EAAE,SAAS,EAAE,MAAM,iBAAiB,MAAM,UAAU,OAAO,IAAI;AAE/E,WAAK,QAAQ,YAAY,aAAa;AAAA,IACxC;AAEA,kBAAc,QAAQ;AAEtB,WAAO,KAAK,KAAK,IAAA;AAAA,EACnB;AAAA,EAEA,aAAa,KAA2B;AACtC,WAAO,KAAK,aAAa,GAAG,KAAK;AAAA,EACnC;AAAA,EAEA,aAAa,KAAyC;AACpD,UAAM,QAAQ,IAAI,QAAQ;AAC1B,QAAI,MAAM,IAAI,QAAQ;AACtB,QAAI,OAAO,IAAI,QAAQ;AAEvB,QAAI,OAAO;AACT,YAAM,QAAQ;AACd,aAAO,QAAQ;AAAA,IACjB;AAEA,QAAI,KAAK,eAAe,KAAK,KAAK,QAAQ,GAAG;AAC3C,aAAO;AAAA,IACT,WAAW,KAAK,eAAe,MAAM,KAAK,QAAQ,GAAG;AACnD,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,eAAe,GAAqB,GAA8B;AAChE,QAAI,KAAK;AACT,QAAI,KAAK;AAET,QAAI,EAAE,QAAQ,QAAQ,GAAG,EAAE,KAAA,EAAO,YAAA;AAClC,QAAI,EAAE,QAAQ,QAAQ,GAAG,EAAE,KAAA,EAAO,YAAA;AAElC,WAAO,MAAM;AAAA,EACf;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,KAAa,QAAQ,MAAY;AACxC,UAAM,KAAK,KAAK,iBAAiB,GAAG;AAEpC,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,sBAAsB,MAAM,aAAa;AAAA,IAC3D;AAEA,OAAG,UAAU;AACb,OAAG,cAAc,IAAI,MAAM,OAAO,CAAC;AACnC,OAAG,cAAc,IAAI,MAAM,QAAQ,CAAC;AAAA,EACtC;AAAA,EAEA,iBAAiB,KAAyC;AACxD,WAAO,KAAK,KAAK,SAAS;AAAA,MACxB,mDAAmD,GAAG;AAAA,IAAA;AAAA,EAE1D;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,KAAa,KAAwB,MAAsC;AACnF,UAAM,KAAK,KAAK,iBAAiB,GAAG;AAEpC,QAAI,CAAC,IAAI;AACP,aAAO;AAAA,IACT;AAEA,WAAO,KAAK,WAAW,GAAG,OAAO,KAAK,IAAI;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,IAAqB,KAAwB,MAA+C;AACrG,SAAK,UAAU,KAAK;AAEpB,SAAK,qBAAA;AAEL,SAAK,KAAK,YAAY,QAAQ,EAAE;AAEhC,WAAO,KAAK,KAAK,MAAM,KAAK,IAAI;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKA,iBACE,MACA,IACA,KACA,MACS;AACT,WAAO,QAAQ,CAAA;AACf,SAAK,OAAO;AAEZ,WAAO,KAAK,WAAW,IAAI,KAAK,IAAI;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,MAAc,IAAqB,KAAwB,MAA+C;AAC/G,WAAO,KAAK,iBAAiB,MAAM,IAAI,KAAK,IAAI;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,MAAc,KAAa,KAAwB,MAA+C;AAChH,UAAM,KAAK,KAAK,iBAAiB,GAAG;AAEpC,QAAI,CAAC,IAAI;AACP,aAAO;AAAA,IACT;AAEA,WAAO,KAAK,iBAAiB,MAAM,GAAG,OAAO,KAAK,IAAI;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,MAAc,KAAwB,MAA+C;AACpG,WAAO,QAAQ,CAAA;AACf,SAAK,OAAO;AAEZ,WAAO,KAAK,KAAK,MAAM,KAAK,IAAI;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,IAAqB,KAAwB,MAA+C;AACnG,SAAK,UAAU,KAAK;AAEpB,SAAK,qBAAA;AAEL,SAAK,KAAK,YAAY,QAAQ,EAAE;AAEhC,WAAO,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ,KAAa,KAAwB,MAA+C;AAC1F,UAAM,KAAK,KAAK,iBAAiB,GAAG;AAEpC,QAAI,CAAC,IAAI;AACP,aAAO;AAAA,IACT;AAEA,WAAO,KAAK,SAAS,GAAG,OAAO,KAAK,IAAI;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA,EAKA,WACE,SACA,KACA,MACS;AACT,QAAI,CAAC,KAAK,mBAAmB;AAC3B,aAAO;AAAA,IACT;AAEA,cAAU,WAAW,OAAO,GAAG,gCAAgC,IAAI;AAEnE,QAAI,YAAY,OAAO;AACrB,oBAAc,OAAO,EAAE,KAAK,CAAA,cAAa;AACvC,YAAI,WAAW;AACb,eAAK,KAAK,OAAO,KAAK,IAAI;AAAA,QAC5B;AAAA,MACF,CAAC;AAAA,IACH,OAAO;AACL,WAAK,KAAK,OAAO,KAAK,IAAI;AAAA,IAC5B;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAU,KACA,KACA,KACA,MAAwD;AACtE,UAAM,KAAK,KAAK,iBAAiB,GAAG;AAEpC,QAAI,CAAC,IAAI;AACP,aAAO;AAAA,IACT;AAEA,WAAO,KAAK,WAAW,GAAG,OAAO,KAAK,KAAK,IAAI;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,WAAW,IACA,KACA,KACA,MAAwD;AACvE,UAAM,OAAO,GAAG,gCAAgC;AAEhD,UAAM,YAAY,MAAM,cAAc,GAAG;AAEzC,QAAI,WAAW;AAGb,aAAO,QAAQ,CAAA;AAEf,WAAK,KAAK;AAEV,WAAK,KAAK,OAAO,KAAK,IAAI;AAAA,IAC5B;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,OAAgB;AACxB,UAAM;AAAA,MACJ,KAAK,QAAQ,iBAAmC,+CAA+C;AAAA,IAAA,EAE9F,QAAQ,CAAC,UAAU;AAClB,YAAM,UAAU;AAEhB,YAAM,cAAc,IAAI,YAAY,OAAO,CAAC;AAC5C,YAAM,cAAc,IAAI,YAAY,QAAQ,CAAC;AAAA,IAC/C,CAAC;AAEH,WAAO;AAAA,EACT;AAAA,EAEA,uBAAuB;AACrB,UAAM;AAAA,MACJ,KAAK,QAAQ,iBAAmC,+CAA+C;AAAA,IAAA,EAE9F,QAAQ,CAAC,UAAU;AAClB,YAAM,WAAW;AAAA,IACnB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,eAAuB;AACrB,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,aAAiC;AAC/B,WAAO,MAAM;AAAA,MACX,KAAK,QAAQ,iBAAmC,uDAAuD;AAAA,IAAA;AAAA,EAE3G;AAAA,EAEA,mBAA6B;AAC3B,WAAO,KAAK,aAAa,IAAI,CAAA,UAAS,MAAM,KAAK;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,OAAe,UAA8C,KAAoB;AAC/F,UAAM,OAAO,GAAG,8BAA8B;AAE9C,QAAI,CAAC,KAAK,cAAc;AACtB,UAAI,QAAQ,IAAI;AACd,oBAAY,GAAG;AAAA,MACjB;AAEA,UAAI,OAAO;AACT,cAAM,gBAAA;AACN,cAAM,eAAA;AAAA,MACR;AAEA,aAAO;AAAA,IACT;AAEA,QAAI,UAAU;AACZ,eAAS,IAAI;AAAA,IACf;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,aAAsB;AACpB,WAAO,KAAK,iBAAiB;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,KAAwB,MAAsC;AACvE,WAAO,KAAK,iBAAiB,WAAW,KAAK,IAAI;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,IAAqB,OAAe,KAAwB,MAA+C;AAClH,WAAO,QAAQ,CAAA;AACf,SAAK,QAAQ;AAEb,WAAO,KAAK,iBAAiB,QAAQ,IAAI,KAAK,IAAI;AAAA,EACpD;AAAA,EAEA,OAAO,IAAqB,KAAwB,MAA+C;AACjG,WAAO,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI;AAAA,EACxC;AAAA,EAEA,SAAS,IAAqB,KAAwB,MAA+C;AACnG,WAAO,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI;AAAA,EACvC;AAAA,EAEA,MAAM,SAAS,IAAI;AACjB,WAAO,KAAK,KAAK,SAAS,KAAK;AAAA,EACjC;AACF;"}