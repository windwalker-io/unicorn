import { d as data } from "../data.js";
function useSystemUri(type, path) {
  const uri2 = UnicornSystemUri.get();
  if (type) {
    return uri2[type](path);
  }
  return uri2;
}
function useAssetUri(type, path) {
  const asset2 = UnicornAssetUri.get();
  if (type) {
    return asset2[type](path);
  }
  return asset2;
}
function uri(type) {
  return data("unicorn.uri")[type];
}
function asset(type) {
  return uri("asset")[type];
}
function addUriBase(uri2, type = "path") {
  if (uri2.substring(0, 2) === "//" || uri2.substring(0, 4) === "http") {
    return uri2;
  }
  return asset(type) + "/" + uri2;
}
class UnicornSystemUri extends URL {
  static instance;
  static get() {
    return this.instance ??= new this(uri("full"));
  }
  path(path = "") {
    return uri("path") + path;
  }
  root(path = "") {
    return uri("root") + path;
  }
  current() {
    return uri("current") || "";
  }
  full() {
    return uri("full") || "";
  }
  route() {
    return uri("route") || "";
  }
  script() {
    return uri("script") || "";
  }
  routeWithQuery() {
    const route = this.route();
    const query = this.searchParams.toString();
    return query ? `${route}?${query}` : route;
  }
  routeAndQuery() {
    const route = this.route();
    const query = this.searchParams.toString();
    return [route, query];
  }
}
class UnicornAssetUri {
  static instance;
  static get() {
    return this.instance ??= new this();
  }
  path(path = "") {
    return asset("path") + path;
  }
  root(path = "") {
    return asset("root") + path;
  }
}
export {
  UnicornSystemUri as U,
  useAssetUri as a,
  addUriBase as b,
  UnicornAssetUri as c,
  useSystemUri as u
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJpLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmljZS91cmkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGF0YSB9IGZyb20gJy4uL2RhdGEnO1xyXG5cclxudHlwZSBVcmlUeXBlcyA9ICdmdWxsJyB8ICdwYXRoJyB8ICdyb290JyB8ICdjdXJyZW50JyB8ICdyb3V0ZScgfCAnc2NyaXB0JztcclxudHlwZSBBc3NldFR5cGVzID0gJ3Jvb3QnIHwgJ3BhdGgnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZVN5c3RlbVVyaSgpOiBVbmljb3JuU3lzdGVtVXJpO1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlU3lzdGVtVXJpKHR5cGU6IFVyaVR5cGVzKTogc3RyaW5nO1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlU3lzdGVtVXJpKHR5cGU/OiBVcmlUeXBlcywgcGF0aD86IHN0cmluZyk6IFVuaWNvcm5TeXN0ZW1VcmkgfCBzdHJpbmcge1xyXG4gIGNvbnN0IHVyaSA9IFVuaWNvcm5TeXN0ZW1VcmkuZ2V0KCk7XHJcblxyXG4gIGlmICh0eXBlKSB7XHJcbiAgICByZXR1cm4gdXJpW3R5cGVdKHBhdGgpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHVyaTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUFzc2V0VXJpKCk6IFVuaWNvcm5Bc3NldFVyaTtcclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUFzc2V0VXJpKHR5cGU/OiBBc3NldFR5cGVzLCBwYXRoPzogc3RyaW5nKTogc3RyaW5nO1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlQXNzZXRVcmkodHlwZT86IEFzc2V0VHlwZXMsIHBhdGg/OiBzdHJpbmcpOiBVbmljb3JuQXNzZXRVcmkgfCBzdHJpbmcge1xyXG4gIGNvbnN0IGFzc2V0ID0gVW5pY29ybkFzc2V0VXJpLmdldCgpO1xyXG5cclxuICBpZiAodHlwZSkge1xyXG4gICAgcmV0dXJuIGFzc2V0W3R5cGVdKHBhdGgpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGFzc2V0O1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cmkodHlwZTogc3RyaW5nKSB7XHJcbiAgcmV0dXJuIGRhdGEoJ3VuaWNvcm4udXJpJylbdHlwZV07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFzc2V0KHR5cGU6IHN0cmluZykge1xyXG4gIHJldHVybiB1cmkoJ2Fzc2V0JylbdHlwZV07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRVcmlCYXNlKHVyaTogc3RyaW5nLCB0eXBlID0gJ3BhdGgnKSB7XHJcbiAgaWYgKHVyaS5zdWJzdHJpbmcoMCwgMikgPT09ICcvXFwvJyB8fCB1cmkuc3Vic3RyaW5nKDAsIDQpID09PSAnaHR0cCcpIHtcclxuICAgIHJldHVybiB1cmk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gYXNzZXQodHlwZSkgKyAnLycgKyB1cmk7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVbmljb3JuU3lzdGVtVXJpIGV4dGVuZHMgVVJMIHtcclxuICBzdGF0aWMgaW5zdGFuY2U6IFVuaWNvcm5TeXN0ZW1Vcmk7XHJcblxyXG4gIHN0YXRpYyBnZXQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZSA/Pz0gbmV3IHRoaXModXJpKCdmdWxsJykpO1xyXG4gIH1cclxuXHJcbiAgcGF0aChwYXRoOiBzdHJpbmcgPSAnJyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdXJpKCdwYXRoJykgKyBwYXRoO1xyXG4gIH1cclxuXHJcbiAgcm9vdChwYXRoOiBzdHJpbmcgPSAnJyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdXJpKCdyb290JykgKyBwYXRoO1xyXG4gIH1cclxuXHJcbiAgY3VycmVudCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHVyaSgnY3VycmVudCcpIHx8ICcnO1xyXG4gIH1cclxuXHJcbiAgZnVsbCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHVyaSgnZnVsbCcpIHx8ICcnO1xyXG4gIH1cclxuXHJcbiAgcm91dGUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB1cmkoJ3JvdXRlJykgfHwgJyc7XHJcbiAgfVxyXG5cclxuICBzY3JpcHQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB1cmkoJ3NjcmlwdCcpIHx8ICcnO1xyXG4gIH1cclxuXHJcbiAgcm91dGVXaXRoUXVlcnkoKSB7XHJcbiAgICBjb25zdCByb3V0ZSA9IHRoaXMucm91dGUoKTtcclxuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5zZWFyY2hQYXJhbXMudG9TdHJpbmcoKTtcclxuXHJcbiAgICByZXR1cm4gcXVlcnkgPyBgJHtyb3V0ZX0/JHtxdWVyeX1gIDogcm91dGU7XHJcbiAgfVxyXG5cclxuICByb3V0ZUFuZFF1ZXJ5KCkge1xyXG4gICAgY29uc3Qgcm91dGUgPSB0aGlzLnJvdXRlKCk7XHJcbiAgICBjb25zdCBxdWVyeSA9IHRoaXMuc2VhcmNoUGFyYW1zLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgcmV0dXJuIFtyb3V0ZSwgcXVlcnldO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVuaWNvcm5Bc3NldFVyaSB7XHJcbiAgc3RhdGljIGluc3RhbmNlOiBVbmljb3JuQXNzZXRVcmk7XHJcblxyXG4gIHN0YXRpYyBnZXQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZSA/Pz0gbmV3IHRoaXMoKTtcclxuICB9XHJcblxyXG4gIHBhdGgocGF0aDogc3RyaW5nID0gJycpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGFzc2V0KCdwYXRoJykgKyBwYXRoO1xyXG4gIH1cclxuXHJcbiAgcm9vdChwYXRoOiBzdHJpbmcgPSAnJyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYXNzZXQoJ3Jvb3QnKSArIHBhdGg7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJ1cmkiLCJhc3NldCJdLCJtYXBwaW5ncyI6IjtBQU9PLFNBQVMsYUFBYSxNQUFpQixNQUEwQztBQUN0RixRQUFNQSxPQUFNLGlCQUFpQixJQUFBO0FBRTdCLE1BQUksTUFBTTtBQUNSLFdBQU9BLEtBQUksSUFBSSxFQUFFLElBQUk7QUFBQSxFQUN2QjtBQUVBLFNBQU9BO0FBQ1Q7QUFJTyxTQUFTLFlBQVksTUFBbUIsTUFBeUM7QUFDdEYsUUFBTUMsU0FBUSxnQkFBZ0IsSUFBQTtBQUU5QixNQUFJLE1BQU07QUFDUixXQUFPQSxPQUFNLElBQUksRUFBRSxJQUFJO0FBQUEsRUFDekI7QUFFQSxTQUFPQTtBQUNUO0FBRUEsU0FBUyxJQUFJLE1BQWM7QUFDekIsU0FBTyxLQUFLLGFBQWEsRUFBRSxJQUFJO0FBQ2pDO0FBRUEsU0FBUyxNQUFNLE1BQWM7QUFDM0IsU0FBTyxJQUFJLE9BQU8sRUFBRSxJQUFJO0FBQzFCO0FBRU8sU0FBUyxXQUFXRCxNQUFhLE9BQU8sUUFBUTtBQUNyRCxNQUFJQSxLQUFJLFVBQVUsR0FBRyxDQUFDLE1BQU0sUUFBU0EsS0FBSSxVQUFVLEdBQUcsQ0FBQyxNQUFNLFFBQVE7QUFDbkUsV0FBT0E7QUFBQUEsRUFDVDtBQUVBLFNBQU8sTUFBTSxJQUFJLElBQUksTUFBTUE7QUFDN0I7QUFFTyxNQUFNLHlCQUF5QixJQUFJO0FBQUEsRUFDeEMsT0FBTztBQUFBLEVBRVAsT0FBTyxNQUFNO0FBQ1gsV0FBTyxLQUFLLGFBQWEsSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDO0FBQUEsRUFDL0M7QUFBQSxFQUVBLEtBQUssT0FBZSxJQUFZO0FBQzlCLFdBQU8sSUFBSSxNQUFNLElBQUk7QUFBQSxFQUN2QjtBQUFBLEVBRUEsS0FBSyxPQUFlLElBQVk7QUFDOUIsV0FBTyxJQUFJLE1BQU0sSUFBSTtBQUFBLEVBQ3ZCO0FBQUEsRUFFQSxVQUFrQjtBQUNoQixXQUFPLElBQUksU0FBUyxLQUFLO0FBQUEsRUFDM0I7QUFBQSxFQUVBLE9BQWU7QUFDYixXQUFPLElBQUksTUFBTSxLQUFLO0FBQUEsRUFDeEI7QUFBQSxFQUVBLFFBQWdCO0FBQ2QsV0FBTyxJQUFJLE9BQU8sS0FBSztBQUFBLEVBQ3pCO0FBQUEsRUFFQSxTQUFpQjtBQUNmLFdBQU8sSUFBSSxRQUFRLEtBQUs7QUFBQSxFQUMxQjtBQUFBLEVBRUEsaUJBQWlCO0FBQ2YsVUFBTSxRQUFRLEtBQUssTUFBQTtBQUNuQixVQUFNLFFBQVEsS0FBSyxhQUFhLFNBQUE7QUFFaEMsV0FBTyxRQUFRLEdBQUcsS0FBSyxJQUFJLEtBQUssS0FBSztBQUFBLEVBQ3ZDO0FBQUEsRUFFQSxnQkFBZ0I7QUFDZCxVQUFNLFFBQVEsS0FBSyxNQUFBO0FBQ25CLFVBQU0sUUFBUSxLQUFLLGFBQWEsU0FBQTtBQUVoQyxXQUFPLENBQUMsT0FBTyxLQUFLO0FBQUEsRUFDdEI7QUFDRjtBQUVPLE1BQU0sZ0JBQWdCO0FBQUEsRUFDM0IsT0FBTztBQUFBLEVBRVAsT0FBTyxNQUFNO0FBQ1gsV0FBTyxLQUFLLGFBQWEsSUFBSSxLQUFBO0FBQUEsRUFDL0I7QUFBQSxFQUVBLEtBQUssT0FBZSxJQUFZO0FBQzlCLFdBQU8sTUFBTSxNQUFNLElBQUk7QUFBQSxFQUN6QjtBQUFBLEVBRUEsS0FBSyxPQUFlLElBQVk7QUFDOUIsV0FBTyxNQUFNLE1BQU0sSUFBSTtBQUFBLEVBQ3pCO0FBQ0Y7In0=
