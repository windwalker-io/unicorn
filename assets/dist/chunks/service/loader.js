import { i as injectCssToDocument } from "./dom.js";
function useScriptImport(src, attrs = {}) {
  const script = document.createElement("script");
  script.src = src;
  for (const key in attrs) {
    script.setAttribute(key, attrs[key]);
  }
  return new Promise((resolve, reject) => {
    script.onload = () => {
      resolve();
      document.body.removeChild(script);
    };
    script.onerror = (e) => {
      reject(e);
      document.body.removeChild(script);
    };
    document.body.appendChild(script);
  });
}
function doImport(src) {
  return import(
    /* @vite-ignore */
    src
  );
}
async function useImport(...src) {
  if (src.length === 1) {
    return doImport(src[0]);
  }
  const promises = [];
  src.forEach((link) => {
    promises.push(
      link instanceof Promise ? link : doImport(link)
    );
  });
  return Promise.all(promises);
}
async function useSeriesImport(...src) {
  const modules = [];
  for (const source of src) {
    if (Array.isArray(source)) {
      const m2 = await useImport(...source);
      modules.push(m2);
      continue;
    }
    const m = await useImport(source);
    modules.push(m);
  }
  return modules;
}
async function useCssIncludes(...hrefs) {
  const promises = hrefs.map((href) => {
    href = resolveUrl(href);
    return new Promise((resolve, reject) => {
      const link = document.createElement("link");
      link.rel = "stylesheet";
      link.href = href;
      link.onload = () => resolve();
      link.onerror = (e) => reject(e);
      document.head.appendChild(link);
    });
  });
  return Promise.all(promises);
}
const importedSheets = {};
async function useCssImport(...hrefs) {
  const modules = await Promise.all(
    hrefs.map((href) => {
      if (!importedSheets[href]) {
        importedSheets[href] = simulateCssImport(href);
      }
      return importedSheets[href];
    })
  );
  const styles = modules.map((module) => module.default);
  return injectCssToDocument(...styles);
}
async function simulateCssImport(href) {
  href = resolveUrl(href);
  const response = await fetch(href);
  if (!response.ok) {
    throw new Error(`Failed to load CSS: ${href}`);
  }
  const cssText = await response.text();
  const sheet = new CSSStyleSheet();
  await sheet.replace(cssText);
  return { default: sheet };
}
let importMap;
function parseImportMap() {
  const importMapScript = document.querySelector('script[type="importmap"]');
  if (importMapScript) {
    try {
      return JSON.parse(importMapScript.textContent || "{}").imports || {};
    } catch (e) {
      console.error("Failed to parse import map:", e);
    }
  }
  return {};
}
function resolveUrl(specifier) {
  importMap ??= parseImportMap();
  for (const [prefix, target] of Object.entries(importMap)) {
    if (specifier === prefix) {
      return target;
    }
  }
  for (const [prefix, target] of Object.entries(importMap)) {
    if (specifier.startsWith(prefix)) {
      return specifier.replace(prefix, target);
    }
  }
  return specifier;
}
export {
  useImport as a,
  useScriptImport as b,
  useSeriesImport as c,
  doImport as d,
  useCssIncludes as e,
  useCssImport as u
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
