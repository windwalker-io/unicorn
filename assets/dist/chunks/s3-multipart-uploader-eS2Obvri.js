import { M as Mixin, E as EventMixin, m as mergeDeep, q as useHttpClient, B as createQueue } from "./unicorn-DR9JpPYO.js";
const defaultOptions = {
  chunkSize: 5 * 1024 * 1024,
  // 5MB
  concurrency: 2
};
class S3MultipartUploader extends (/* @__PURE__ */ Mixin(EventMixin)) {
  options;
  constructor(options) {
    super();
    this.options = mergeDeep({}, defaultOptions, options);
  }
  async upload(file, path, options = {}) {
    const extra = { ...this.options.extra ?? {}, ...options.extra ?? {} };
    if (typeof file === "string") {
      file = new Blob([file], { type: options["ContentType"] || "text/plain" });
    }
    if (file instanceof Blob) {
      if (path.endsWith(".{ext}")) {
        throw new Error("If using Blob or file data string, you must provide a valid file extension in the path.");
      }
      file = new File([file], "blob", { type: file.type });
    }
    if (file instanceof File) {
      extra["ContentType"] = options["ContentType"] || file.type;
    }
    if (options.ACL || this.options.ACL) {
      extra.ACL = options.ACL || this.options.ACL;
    }
    path = this.replaceExt(path, file);
    const initData = { extra, path, profile: this.options.profile };
    const http = await useHttpClient();
    if (options["filename"]) {
      initData["filename"] = options["filename"];
    }
    this.trigger("start", file, initData);
    const initRes = await http.post(
      await this.resolveRoute("init"),
      initData
    );
    const { id } = initRes.data.data;
    try {
      const chunkSize = this.options.chunkSize;
      const chunks = Math.ceil(file.size / chunkSize);
      let uploadedBytes = 0;
      let parts = [];
      let currentPart = 1;
      const queue = createQueue(this.options.concurrency);
      const promises = [];
      while (currentPart <= chunks) {
        const partNumber = currentPart;
        const p = queue.push(async () => {
          const { blob, etag } = await this.uploadPart(file, { id, path, partNumber, chunkSize });
          uploadedBytes += blob.size;
          this.updateProgress(uploadedBytes, file.size, options);
          parts.push({ ETag: etag, PartNumber: partNumber });
        });
        promises.push(p);
        currentPart++;
      }
      await Promise.all(promises);
      const completeRes = await http.post(
        await this.resolveRoute("complete"),
        {
          id,
          path,
          parts: parts.sort((a, b) => a.PartNumber - b.PartNumber),
          profile: this.options.profile
        }
      );
      const { url } = completeRes.data.data;
      this.trigger("success", url);
      return { url };
    } catch (e) {
      await this.abort(id, path);
      throw e;
    }
  }
  async uploadPart(file, payload) {
    const http = await useHttpClient();
    const { id, path, partNumber, chunkSize } = payload;
    const start = (partNumber - 1) * chunkSize;
    const end = Math.min(partNumber * chunkSize, file.size);
    const blob = file.slice(start, end);
    const signRes = await http.post(
      await this.resolveRoute("sign"),
      {
        id,
        path,
        partNumber,
        profile: this.options.profile
      }
    );
    const { url } = signRes.data.data;
    const res = await http.put(url, blob);
    const etag = res.headers?.get("ETag") || "";
    return { blob, etag };
  }
  async abort(id, path) {
    const http = await useHttpClient();
    await http.post(
      await this.resolveRoute("abort"),
      {
        id,
        path,
        profile: this.options.profile
      }
    );
  }
  updateProgress(loaded, total, options) {
    const percent = loaded / total * 100;
    const event = { percent, loaded, total };
    this.trigger("progress", event);
    this.options.onProgress?.(event);
    if (options.onProgress) {
      options.onProgress(event);
    }
  }
  async resolveRoute(action) {
    if (typeof this.options.routes === "function") {
      return this.options.routes(action);
    }
    return this.options.routes[action];
  }
  replaceExt(path, file) {
    if (file instanceof File) {
      const fileExt = file.name.split(".").pop();
      if (path.endsWith(".{ext}")) {
        return path.replace(/\.{ext}$/, fileExt ? "." + fileExt : "");
      }
    }
    return path;
  }
  on(event, handler) {
    return super.on(event, handler);
  }
}
export {
  S3MultipartUploader
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
