{"version":3,"file":"s3-uploader.js","sources":["../../src/module/s3-uploader.ts"],"sourcesContent":["import { useHttpClient } from '../composable';\nimport { data } from '../data';\nimport { EventAwareInterface, EventHandler, EventMixin } from '../events';\nimport type { UnicornHttpClient } from './http-client';\nimport { mergeDeep } from '../utilities';\nimport { AxiosProgressEvent, AxiosResponse } from 'axios';\nimport { Mixin } from 'ts-mixer';\n\nconst instances: Record<string, S3Uploader> = {};\nexport function get(name: string, options?: Partial<S3UploaderGlobalOptions>): S3Uploader;\nexport function get(\n  name: string,\n  options: Partial<S3UploaderGlobalOptions> = {}\n): S3Uploader | void {\n  return instances[name] ??= create(name, options);\n}\n\nexport function create(name: string, options: Partial<S3UploaderGlobalOptions> = {}): S3Uploader {\n  return new S3Uploader(name, options);\n}\n\nexport function destroy(name: string) {\n  delete instances[name];\n}\n\nconst defaultOptions: S3UploaderGlobalOptions = {\n  endpoint: '',\n  subfolder: '',\n  viewerHost: '',\n  starts_with: [],\n  formInputs: {\n    acl: '',\n    bucket: '',\n    key: '',\n    Policy: '',\n    'X-Amz-Algorithm': '',\n    'X-Amz-Credential': '',\n    'X-Amz-Date': '',\n    'X-Amz-Signature': '',\n  }\n};\n\nexport class S3Uploader extends Mixin(EventMixin) implements EventAwareInterface {\n  options: S3UploaderGlobalOptions;\n  http?: UnicornHttpClient;\n\n  constructor(protected name: string, options: Partial<S3UploaderGlobalOptions> = {}) {\n    super();\n\n    const awsOptions = data('@s3.uploader.' + name) || {};\n\n    this.options = mergeDeep<S3UploaderGlobalOptions>({}, defaultOptions, awsOptions, options);\n  }\n\n  async getHttpClient() {\n    return this.http ??= await useHttpClient();\n  }\n\n  /**\n   * Do upload.\n   */\n  async upload(\n    file: string | File | Blob,\n    path: string,\n    options: Partial<S3UploaderRequestOptions> = {}\n  ): Promise<S3UploaderResponse> {\n    const httpClient = await this.getHttpClient();\n\n    const fileData = new FormData();\n    const inputs = mergeDeep({}, this.options.formInputs, options.formInputs || {});\n\n    if (typeof file === 'string') {\n      file = new Blob([file], { type: options['Content-Type'] || 'text/plain' });\n    }\n\n    if (file instanceof Blob && path.endsWith('.{ext}')) {\n      throw new Error('If using Blob or file data string, you must provide a valid file extension in the path.');\n    }\n\n    if ((file instanceof Blob) || (file as any) instanceof File) {\n      options['Content-Type'] = options['Content-Type'] || file.type;\n    }\n\n    if (options['filename']) {\n      const filename = this.replaceExt(options['filename'], file);\n      options['Content-Disposition'] = 'attachment; filename*=UTF-8\\'\\'' + encodeURIComponent(filename);\n    }\n\n    path = this.replaceExt(path, file);\n\n    options['key'] = trimSlashes(this.options.subfolder || '') + '/'\n      + trimSlashes(path);\n    options['key'] = trimSlashes(options['key']);\n    options['Content-Type'] = options['Content-Type'] || undefined;\n    options['Content-Disposition'] = options['Content-Disposition'] || undefined;\n\n    // Prepare pre-signed data\n    for (let key in inputs) {\n      fileData.set(key, inputs[key]);\n    }\n\n    // Prepare custom data\n    for (let key of Object.keys(this.options.starts_with)) {\n      if (options[key]) {\n        fileData.set(key, options[key]);\n      }\n    }\n\n    fileData.append('file', file);\n\n    this.trigger('start', fileData);\n\n    try {\n      let res = await httpClient.post(\n        this.options.endpoint || '',\n        fileData,\n        {\n          onUploadProgress: (e) => {\n            if (options.onUploadProgress) {\n              options.onUploadProgress(e);\n            }\n\n            this.trigger('upload-progress', e);\n\n            if (e.total != null) {\n              this.trigger('progress', e.loaded / e.total, e);\n            }\n          }\n        }\n      ) as S3UploaderResponse;\n\n      const url = this.options.viewerHost + '/'\n        + trimSlashes(path);\n\n      this.trigger('success', url, res);\n\n      res.url = url;\n\n      return res;\n    } finally {\n      this.trigger('end');\n    }\n  }\n\n  replaceExt(path: string, file: File | Blob): string {\n    if (file instanceof File) {\n      const fileExt = file.name.split('.').pop();\n\n      if (path.endsWith('.{ext}')) {\n        return path.replace(/\\.{ext}$/, fileExt ? '.' + fileExt : '');\n      }\n    }\n\n    return path;\n  }\n\n  on(event: 'start', handler: StartEventHandler): this;\n  on(event: 'success', handler: SuccessEventHandler): this;\n  on(event: 'end', handler: EndEventHandler): this;\n  on(event: 'upload-progress', handler: UploadProgressEventHandler): this;\n  on(event: 'progress', handler: ProgressEventHandler): this;\n  on(event: string | string[], handler: EventHandler): this {\n    return super.on(event, handler);\n  }\n\n  onStart(handler: StartEventHandler): this {\n    return this.on('start', handler);\n  }\n\n  onSuccess(handler: SuccessEventHandler): this {\n    return this.on('success', handler);\n  }\n\n  onEnd(handler: EndEventHandler): this {\n    return this.on('end', handler);\n  }\n\n  onProgress(handler: UploadProgressEventHandler): this {\n    return this.on('upload-progress', handler);\n  }\n\n  onProgressWithTotal(handler: ProgressEventHandler): this {\n    return this.on('progress', handler);\n  }\n}\n\ntype EndEventHandler = () => void;\ntype SuccessEventHandler = (url: string, res: S3UploaderResponse) => void;\ntype StartEventHandler = (fileData: FormData) => void;\ntype UploadProgressEventHandler = (e: AxiosProgressEvent) => void;\ntype ProgressEventHandler = (total: number, e: AxiosProgressEvent) => void;\n\nfunction trimSlashes(str: string) {\n  return str.replace(/^\\/+|\\/+$/g, '');\n}\n\nexport interface S3UploaderResponse extends AxiosResponse {\n  url: string;\n}\n\nexport interface S3UploaderGlobalOptions {\n  endpoint?: string;\n  subfolder?: string;\n  viewerHost?: string;\n  starts_with: any[];\n  formInputs?: {\n    acl: string;\n    bucket: string;\n    key: string;\n    Policy: string;\n    'X-Amz-Algorithm': string;\n    'X-Amz-Credential': string;\n    'X-Amz-Date': string;\n    'X-Amz-Signature': string;\n    [name: string]: any\n  },\n}\n\nexport interface S3UploaderRequestOptions {\n  formInputs?: { [name: string]: any };\n  onUploadProgress?: (e: AxiosProgressEvent) => void;\n  'Content-Type'?: string;\n  'Content-Disposition'?: string;\n  key?: string;\n\n  [name: string]: any;\n}\n\nexport interface S3UploaderModule {\n  get(name: string, options?: Partial<S3UploaderGlobalOptions>): S3Uploader;\n  create(name: string, options?: Partial<S3UploaderGlobalOptions>): S3Uploader;\n  destroy(name: string): void;\n  S3Uploader: typeof S3Uploader;\n}\n"],"names":[],"mappings":"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"}