{"version":3,"file":"field-flatpickr.js","sources":["../../src/module/field-flatpickr.ts"],"sourcesContent":["import { useCssImport, useImport, injectCssToDocument } from '../service';\nimport flatpickr from 'flatpickr';\nimport css from 'flatpickr/dist/flatpickr.css?inline';\n\ninjectCssToDocument(css);\n\nclass FlatpickrElement extends HTMLElement {\n  static get is() {\n    return 'uni-flatpickr';\n  }\n\n  instance!: flatpickr.Instance;\n\n  constructor() {\n    super();\n  }\n\n  get selector() {\n    return this.getAttribute('selector') || 'input';\n  }\n\n  get locale() {\n    return this.getAttribute('locale') || '';\n  }\n\n  // todo: Currently not support single option attributes\n  getOptions() {\n    const options: any = {};\n    const ignore = [\n      'selector'\n    ];\n\n    this.getAttributeNames().forEach((name) => {\n      if (ignore.indexOf(name) !== -1) {\n        return;\n      }\n\n      options[name] = this.getAttribute(name);\n    });\n\n    return options;\n  }\n\n  get $input(): HTMLInputElement {\n    return this.querySelector<HTMLInputElement>('input')!;\n  }\n\n  async connectedCallback() {\n    let options: flatpickr.Options.Options = JSON.parse(this.getAttribute('options') || '{}') || {};\n\n    options.autoFillDefaultTime = true;\n    const now = new Date();\n    options.defaultHour = now.getHours();\n    options.defaultMinute = now.getMinutes();\n    options.defaultSeconds = now.getSeconds();\n\n    options = await this.handleOptions(options);\n\n    this.instance = flatpickr(\n      this.querySelector<HTMLElement>(this.selector)!,\n      options\n    );\n\n    // If no value, set default time on open\n    this.instance.config.onOpen.push(() => {\n      if (this.instance.input.value === '') {\n        const now = new Date();\n        this.instance.jumpToDate(now);\n        this.instance.config.defaultHour = now.getHours();\n        this.instance.config.defaultMinute = now.getMinutes();\n        this.instance.config.defaultSeconds = now.getSeconds();\n      }\n    });\n\n    this.querySelector('[data-toggle]')?.addEventListener('click', () => {\n      setTimeout(() => {\n        this.querySelector<HTMLInputElement>('[data-input]')?.focus();\n      }, 0);\n    });\n  }\n\n  async handleOptions(options: flatpickr.Options.Options): Promise<flatpickr.Options.Options> {\n    options.plugins = options.plugins || [];\n\n    await Promise.all([\n      this.handleLocale(options),\n      this.handleMonthSelect(options)\n    ]);\n\n    return options;\n  }\n\n  private async handleLocale(options: Record<string, any>) {\n    if (this.locale) {\n      await useImport(`flatpickr/dist/l10n/${this.locale}.js`);\n\n      options.locale = this.locale.replace(/-/, '_');\n    }\n\n    return options;\n  }\n\n  private async handleMonthSelect(options: Record<string, any>) {\n    if (options.monthSelect) {\n      useCssImport('flatpickr/dist/plugins/monthSelect/style.css');\n      const { default: monthSelect } = await import('flatpickr/dist/plugins/monthSelect');\n\n      if (typeof options.monthSelect === 'boolean') {\n        options.monthSelect = {\n          shorthand: true,\n          dateFormat: 'Y-m',\n          altFormat: 'Y-m'\n        };\n      }\n\n      options.plugins.push(monthSelect(options.monthSelect));\n    }\n\n    return options;\n  }\n\n  getInstance() {\n    return this.instance;\n  }\n}\n\ncustomElements.define(FlatpickrElement.is, FlatpickrElement);\n"],"names":["now"],"mappingsoCAAoB,GAAG;AAEvB,MAAM,yBAAyB,YAAY;AAAA,EACzC,WAAW,KAAK;AACd,WAAO;AAAA,EACT;AAAA,EAEA;AAAA,EAEA,cAAc;AACZ,UAAA;AAAA,EACF;AAAA,EAEA,IAAI,WAAW;AACb,WAAO,KAAK,aAAa,UAAU,KAAK;AAAA,EAC1C;AAAA,EAEA,IAAI,SAAS;AACX,WAAO,KAAK,aAAa,QAAQ,KAAK;AAAA,EACxC;AAAA;AAAA,EAGA,aAAa;AACX,UAAM,UAAe,CAAA;AACrB,UAAM,SAAS;AAAA,MACb;AAAA,IAAA;AAGF,SAAK,kBAAA,EAAoB,QAAQ,CAAC,SAAS;AACzC,UAAI,OAAO,QAAQ,IAAI,MAAM,IAAI;AAC/B;AAAA,MACF;AAEA,cAAQ,IAAI,IAAI,KAAK,aAAa,IAAI;AAAA,IACxC,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEA,IAAI,SAA2B;AAC7B,WAAO,KAAK,cAAgC,OAAO;AAAA,EACrD;AAAA,EAEA,MAAM,oBAAoB;AACxB,QAAI,UAAqC,KAAK,MAAM,KAAK,aAAa,SAAS,KAAK,IAAI,KAAK,CAAA;AAE7F,YAAQ,sBAAsB;AAC9B,UAAM,0BAAU,KAAA;AAChB,YAAQ,cAAc,IAAI,SAAA;AAC1B,YAAQ,gBAAgB,IAAI,WAAA;AAC5B,YAAQ,iBAAiB,IAAI,WAAA;AAE7B,cAAU,MAAM,KAAK,cAAc,OAAO;AAE1C,SAAK,WAAW;AAAA,MACd,KAAK,cAA2B,KAAK,QAAQ;AAAA,MAC7C;AAAA,IAAA;AAIF,SAAK,SAAS,OAAO,OAAO,KAAK,MAAM;AACrC,UAAI,KAAK,SAAS,MAAM,UAAU,IAAI;AACpC,cAAMA,2BAAU,KAAA;AAChB,aAAK,SAAS,WAAWA,IAAG;AAC5B,aAAK,SAAS,OAAO,cAAcA,KAAI,SAAA;AACvC,aAAK,SAAS,OAAO,gBAAgBA,KAAI,WAAA;AACzC,aAAK,SAAS,OAAO,iBAAiBA,KAAI,WAAA;AAAA,MAC5C;AAAA,IACF,CAAC;AAED,SAAK,cAAc,eAAe,GAAG,iBAAiB,SAAS,MAAM;AACnE,iBAAW,MAAM;AACf,aAAK,cAAgC,cAAc,GAAG,MAAA;AAAA,MACxD,GAAG,CAAC;AAAA,IACN,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,cAAc,SAAwE;AAC1F,YAAQ,UAAU,QAAQ,WAAW,CAAA;AAErC,UAAM,QAAQ,IAAI;AAAA,MAChB,KAAK,aAAa,OAAO;AAAA,MACzB,KAAK,kBAAkB,OAAO;AAAA,IAAA,CAC/B;AAED,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,aAAa,SAA8B;AACvD,QAAI,KAAK,QAAQ;AACf,YAAM,UAAU,uBAAuB,KAAK,MAAM,KAAK;AAEvD,cAAQ,SAAS,KAAK,OAAO,QAAQ,KAAK,GAAG;AAAA,IAC/C;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,kBAAkB,SAA8B;AAC5D,QAAI,QAAQ,aAAa;AACvB,mBAAa,8CAA8C;AAC3D,YAAM,EAAE,SAAS,gBAAgB,MAAM,OAAO,YAAoC,EAAA,KAAA,OAAA,EAAA,CAAA;AAElF,UAAI,OAAO,QAAQ,gBAAgB,WAAW;AAC5C,gBAAQ,cAAc;AAAA,UACpB,WAAW;AAAA,UACX,YAAY;AAAA,UACZ,WAAW;AAAA,QAAA;AAAA,MAEf;AAEA,cAAQ,QAAQ,KAAK,YAAY,QAAQ,WAAW,CAAC;AAAA,IACvD;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,cAAc;AACZ,WAAO,KAAK;AAAA,EACd;AACF;AAEA,+BAAe,OAAA,uBAAO,iBAAiB,IAAA,GAAI,gBAAgB;"}