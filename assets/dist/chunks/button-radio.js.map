{"version":3,"file":"button-radio.js","sources":["../../src/bootstrap/button-radio.ts"],"sourcesContent":["import { useUniDirective } from '../composable';\nimport { data } from '../data';\nimport { getBoundedInstance, h, selectAll, selectOne } from '../service';\nimport { mergeDeep } from '../utilities';\n\nexport interface ButtonRadioOptions {\n  selector?: string;\n  buttonClass?: string;\n  activeClass?: string;\n  color?: {\n    'default'?: string;\n    green?: string;\n    red?: string;\n    blue?: string;\n  };\n}\n\nconst defaultOptions = {\n  selector: '.btn-group .radio',\n  buttonClass: 'btn',\n  activeClass: 'active',\n  color: {\n    'default': 'btn-default btn-outline-secondary',\n    green: 'btn-success',\n    red: 'btn-danger',\n    blue: 'btn-primary'\n  }\n};\n\nexport class ButtonRadio {\n  wrapper: HTMLElement;\n  element: HTMLElement;\n  radios: HTMLInputElement[] = [];\n  inputs: HTMLInputElement[] = [];\n  buttons: HTMLButtonElement[] = [];\n  colors: string[] = [];\n  options: Required<ButtonRadioOptions>;\n\n  static handle(el: HTMLElement | string, options: ButtonRadioOptions = {}) {\n    return getBoundedInstance(el, 'button-radio', (el: HTMLElement) => {\n      return new this(el, options);\n    });\n  }\n\n  constructor(selector: HTMLElement | string, options: ButtonRadioOptions = {}) {\n    this.element = selectOne<HTMLElement>(selector)!;\n    this.options = mergeDeep({}, defaultOptions, options);\n    let wrapper: HTMLElement;\n\n    // Turn radios into btn-group\n\n    if (this.element.dataset.fieldInput != null) {\n      wrapper = this.element;\n    } else {\n      wrapper = this.element.querySelector('[data-field-input]')!;\n    }\n\n    this.wrapper = wrapper;\n    let inputGroup = wrapper.querySelector<HTMLElement>('.btn-group')!;\n    const exists = inputGroup != null;\n\n    if (!inputGroup) {\n      inputGroup = h('div', { class: 'btn-group' })\n    }\n\n    this.radios = selectAll(wrapper.querySelectorAll<HTMLInputElement>('.radio'));\n\n    this.radios.forEach(radio => {\n      const button = this.prepareButton(radio, exists);\n\n      if (!exists) {\n        inputGroup.appendChild(button);\n      }\n    });\n\n    this.syncState();\n\n    wrapper.insertBefore(inputGroup, wrapper.firstChild);\n\n    wrapper.dispatchEvent(new Event('button-radio.loaded'));\n\n    // Make color elements unique\n    this.colors = [...new Set(this.colors)];\n  }\n\n  prepareButton(radio: HTMLInputElement, exists = false) {\n    const options = this.options;\n\n    const input = radio.querySelector('input')!;\n    const label = radio.querySelector('label')!;\n\n    let button: HTMLButtonElement;\n\n    if (exists) {\n      button = this.wrapper.querySelector(`[data-for=\"${input.id}\"]`)!;\n      button.classList.add(...this.parseClasses(`${options.buttonClass} ${options.color['default']}`));\n    } else {\n      button = h(\n        'button',\n        {\n          type: 'button',\n          class: `${options.buttonClass} ${options.color['default']}`,\n          'data-value': input.value,\n        },\n        `<span>${label.innerHTML}</span>`\n      );\n    }\n\n    data(button, 'input', input);\n    this.inputs.push(input);\n    this.buttons.push(button);\n\n    radio.style.display = 'none';\n\n    // Prepare color schema\n    let color = input.dataset.colorClass || '';\n\n    if (!color) {\n      switch (input.value) {\n        case '':\n          color = options.color.blue || '';\n          break;\n\n        case '0':\n          color = options.color.red || '';\n          break;\n\n        default:\n          color = options.color.green || '';\n          break;\n      }\n\n      input.dataset.colorClass = color;\n    }\n    \n    this.colors.push(color);\n\n    if (input.disabled || input.getAttribute('readonly') != null) {\n      button.classList.add('disabled');\n      button.disabled = true;\n    }\n\n    if (input.getAttribute('readonly') != null) {\n      button.classList.add('readonly');\n    }\n\n    // Bind event\n    button.addEventListener('click', () => {\n      if (input.getAttribute('disabled') || input.getAttribute('readonly')) {\n        return;\n      }\n\n      const changed = !input.checked;\n\n      if (changed) {\n        this.inputs.forEach((ele) => {\n          ele.checked = false;\n        });\n\n        input.checked = true;\n\n        input.dispatchEvent(new Event('change'));\n        input.dispatchEvent(new Event('input'));\n      }\n    });\n\n    input.addEventListener('change', () => {\n      this.syncState();\n    });\n\n    return button;\n  }\n\n  syncState() {\n    const options = this.options;\n\n    this.buttons.forEach((button) => {\n      const input: HTMLInputElement = data(button, 'input');\n\n      button.classList.add(...this.parseClasses(options.color.default || ''));\n      button.classList.remove(...this.parseClasses(options.activeClass));\n      button.classList.remove(...this.parseClasses(...this.colors));\n\n      if (input.checked) {\n        button.classList.add(...this.parseClasses(options.activeClass));\n        button.classList.add(...this.parseClasses(input.dataset.colorClass || ''));\n        button.classList.remove(...this.parseClasses(options.color.default || ''));\n      }\n    });\n  }\n\n  parseClasses(...className: string[]) {\n    const classNameStr = className.join(' ');\n    return classNameStr.split(' ').filter(t => t !== '');\n  }\n}\n\nexport const ready = useUniDirective('button-radio', {\n  mounted(el, { value }) {\n    const options: ButtonRadioOptions = JSON.parse(value || '{}');\n    ButtonRadio.handle(el, value || {});\n  }\n});\n\nexport interface ButtonRadioModule {\n  ButtonRadio: typeof ButtonRadio;\n  ready: typeof ready;\n}\n"],"names":["el"],"mappings":"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"}