import * as bootstrap from "bootstrap";
import { Tooltip } from "bootstrap";
import { h as html, a as selectOne, o as forceArray, b as module } from "./unicorn-D5cXQeSK.js";
class UIBootstrap5 {
  static instance = null;
  bootstrap = bootstrap;
  static get() {
    return this.instance ??= new this();
  }
  renderMessage(messages, type = "info") {
    if (!Array.isArray(messages)) {
      messages = [messages];
    }
    let text = "";
    messages.forEach((msg) => {
      text += `<div class="">${msg}</div>`;
    });
    const msgHtml = html(`<div class="alert alert-${type} alert-dismissible fade show" role="alert">
  ${text}
  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>`);
    const container = selectOne(".c-messages-container");
    if (container) {
      container.appendChild(msgHtml);
    }
  }
  clearMessages() {
    const container = selectOne(".c-messages-container");
    if (container) {
      container.innerHTML = "";
    }
  }
  async keepTab(selector, options = {}) {
    const module2 = await import("./keep-tab-CZCwr_db.js");
    await module2.ready;
    if (selector) {
      return new module2.KeepTab(selector, options);
    }
    return module2;
  }
  async buttonRadio(selector, options = {}) {
    const m = await import("./button-radio-D4_xymO1.js");
    await m.ready;
    if (selector) {
      return m.ButtonRadio.handle(selector, options);
    }
    return m;
  }
  tooltip(selector = '[data-bs-toggle="tooltip"]', config = {}) {
    return forceArray(
      module(
        selector,
        "bs.tooltip",
        (ele) => Tooltip.getOrCreateInstance(ele, config)
      )
    );
  }
  getMajorVersion(module2) {
    return Number(module2.VERSION.split(".").shift());
  }
  pushBootstrapToGlobal() {
    window.bootstrap = bootstrap;
  }
}
export {
  UIBootstrap5
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWktYm9vdHN0cmFwNS1CeC0tMUdBNy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZHVsZS91aS1ib290c3RyYXA1LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGJvb3RzdHJhcCBmcm9tICdib290c3RyYXAnO1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJ2Jvb3RzdHJhcCc7XG5pbXBvcnQgdHlwZSB7IEJ1dHRvblJhZGlvLCBCdXR0b25SYWRpb01vZHVsZSwgQnV0dG9uUmFkaW9PcHRpb25zIH0gZnJvbSAnLi4vYm9vdHN0cmFwL2J1dHRvbi1yYWRpbyc7XG5pbXBvcnQgdHlwZSB7IEtlZXBUYWIsIEtlZXBUYWJNb2R1bGUsIEtlZXBUYWJPcHRpb25zIH0gZnJvbSAnLi4vYm9vdHN0cmFwL2tlZXAtdGFiJztcbmltcG9ydCB7IGZvcmNlQXJyYXksIGh0bWwsIG1vZHVsZSwgc2VsZWN0T25lIH0gZnJvbSAnLi4vc2VydmljZSc7XG5pbXBvcnQgdHlwZSB7IFVJVGhlbWVJbnRlcmZhY2UgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBVSUJvb3RzdHJhcDUgaW1wbGVtZW50cyBVSVRoZW1lSW50ZXJmYWNlIHtcbiAgc3RhdGljIGluc3RhbmNlOiBVSUJvb3RzdHJhcDUgfCBudWxsID0gbnVsbDtcblxuICBib290c3RyYXAgPSBib290c3RyYXA7XG5cbiAgc3RhdGljIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZSA/Pz0gbmV3IHRoaXMoKTtcbiAgfVxuXG4gIHJlbmRlck1lc3NhZ2UobWVzc2FnZXM6IHN0cmluZyB8IHN0cmluZ1tdLCB0eXBlOiBzdHJpbmcgPSAnaW5mbycpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobWVzc2FnZXMpKSB7XG4gICAgICBtZXNzYWdlcyA9IFttZXNzYWdlc107XG4gICAgfVxuXG4gICAgbGV0IHRleHQgPSAnJztcblxuICAgIG1lc3NhZ2VzLmZvckVhY2goKG1zZykgPT4ge1xuICAgICAgdGV4dCArPSBgPGRpdiBjbGFzcz1cIlwiPiR7bXNnfTwvZGl2PmA7XG4gICAgfSk7XG5cbiAgICBjb25zdCBtc2dIdG1sID0gaHRtbChgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LSR7dHlwZX0gYWxlcnQtZGlzbWlzc2libGUgZmFkZSBzaG93XCIgcm9sZT1cImFsZXJ0XCI+XG4gICR7dGV4dH1cbiAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tY2xvc2VcIiBkYXRhLWJzLWRpc21pc3M9XCJhbGVydFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjwvYnV0dG9uPlxuPC9kaXY+YCk7XG5cbiAgICBjb25zdCBjb250YWluZXIgPSBzZWxlY3RPbmUoJy5jLW1lc3NhZ2VzLWNvbnRhaW5lcicpO1xuXG4gICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG1zZ0h0bWwpO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFyTWVzc2FnZXMoKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gc2VsZWN0T25lKCcuYy1tZXNzYWdlcy1jb250YWluZXInKTtcblxuICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICB9XG4gIH1cblxuICBhc3luYyBrZWVwVGFiKCk6IFByb21pc2U8S2VlcFRhYk1vZHVsZT47XG4gIGFzeW5jIGtlZXBUYWIoc2VsZWN0b3I/OiBzdHJpbmcgfCBIVE1MRWxlbWVudCwgb3B0aW9ucz86IEtlZXBUYWJPcHRpb25zKTogUHJvbWlzZTxLZWVwVGFiPjtcbiAgYXN5bmMga2VlcFRhYihzZWxlY3Rvcj86IHN0cmluZyB8IEhUTUxFbGVtZW50LCBvcHRpb25zOiBLZWVwVGFiT3B0aW9ucyA9IHt9KTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCBtb2R1bGUgPSBhd2FpdCBpbXBvcnQoJy4uL2Jvb3RzdHJhcC9rZWVwLXRhYicpO1xuXG4gICAgYXdhaXQgbW9kdWxlLnJlYWR5O1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gbmV3IG1vZHVsZS5LZWVwVGFiKHNlbGVjdG9yLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW9kdWxlO1xuICB9XG5cbiAgYXN5bmMgYnV0dG9uUmFkaW8oKTogUHJvbWlzZTxCdXR0b25SYWRpb01vZHVsZT47XG4gIGFzeW5jIGJ1dHRvblJhZGlvKHNlbGVjdG9yOiBzdHJpbmcgfCBIVE1MRWxlbWVudCwgb3B0aW9ucz86IEJ1dHRvblJhZGlvT3B0aW9ucyk6IFByb21pc2U8QnV0dG9uUmFkaW8+O1xuICBhc3luYyBidXR0b25SYWRpbyhzZWxlY3Rvcj86IHN0cmluZyB8IEhUTUxFbGVtZW50LCBvcHRpb25zOiBCdXR0b25SYWRpb09wdGlvbnMgPSB7fSk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgbSA9IGF3YWl0IGltcG9ydCgnLi4vYm9vdHN0cmFwL2J1dHRvbi1yYWRpbycpO1xuXG4gICAgYXdhaXQgbS5yZWFkeTtcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIG0uQnV0dG9uUmFkaW8uaGFuZGxlKHNlbGVjdG9yLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbTtcbiAgfVxuXG4gIHRvb2x0aXAoXG4gICAgc2VsZWN0b3I6IE5vZGVMaXN0T2Y8RWxlbWVudD4gfCBFbGVtZW50IHwgc3RyaW5nID0gJ1tkYXRhLWJzLXRvZ2dsZT1cInRvb2x0aXBcIl0nLFxuICAgIGNvbmZpZzogUGFydGlhbDxUb29sdGlwLk9wdGlvbnM+ID0ge31cbiAgKTogVG9vbHRpcFtdIHtcbiAgICByZXR1cm4gZm9yY2VBcnJheShcbiAgICAgIG1vZHVsZShcbiAgICAgICAgc2VsZWN0b3IsXG4gICAgICAgICdicy50b29sdGlwJyxcbiAgICAgICAgKGVsZSkgPT4gVG9vbHRpcC5nZXRPckNyZWF0ZUluc3RhbmNlKGVsZSwgY29uZmlnKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBnZXRNYWpvclZlcnNpb24obW9kdWxlOiBhbnkpIHtcbiAgICByZXR1cm4gTnVtYmVyKG1vZHVsZS5WRVJTSU9OLnNwbGl0KCcuJykuc2hpZnQoKSk7XG4gIH1cblxuICBwdXNoQm9vdHN0cmFwVG9HbG9iYWwoKSB7XG4gICAgd2luZG93LmJvb3RzdHJhcCA9IGJvb3RzdHJhcDtcbiAgfVxufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgV2luZG93IHtcbiAgICBib290c3RyYXA6IHR5cGVvZiBib290c3RyYXA7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiXSwibWFwcGluZ3MiOiI7OztBQU9PLE1BQU0sYUFBeUM7QUFBQSxFQUNwRCxPQUFPLFdBQWdDO0FBQUEsRUFFdkMsWUFBWTtBQUFBLEVBRVosT0FBTyxNQUFNO0FBQ1gsV0FBTyxLQUFLLGFBQWEsSUFBSSxLQUFBO0FBQUEsRUFDL0I7QUFBQSxFQUVBLGNBQWMsVUFBNkIsT0FBZSxRQUFRO0FBQ2hFLFFBQUksQ0FBQyxNQUFNLFFBQVEsUUFBUSxHQUFHO0FBQzVCLGlCQUFXLENBQUMsUUFBUTtBQUFBLElBQ3RCO0FBRUEsUUFBSSxPQUFPO0FBRVgsYUFBUyxRQUFRLENBQUMsUUFBUTtBQUN4QixjQUFRLGlCQUFpQixHQUFHO0FBQUEsSUFDOUIsQ0FBQztBQUVELFVBQU0sVUFBVSxLQUFLLDJCQUEyQixJQUFJO0FBQUEsSUFDcEQsSUFBSTtBQUFBO0FBQUEsT0FFRDtBQUVILFVBQU0sWUFBWSxVQUFVLHVCQUF1QjtBQUVuRCxRQUFJLFdBQVc7QUFDYixnQkFBVSxZQUFZLE9BQU87QUFBQSxJQUMvQjtBQUFBLEVBQ0Y7QUFBQSxFQUVBLGdCQUFnQjtBQUNkLFVBQU0sWUFBWSxVQUFVLHVCQUF1QjtBQUVuRCxRQUFJLFdBQVc7QUFDYixnQkFBVSxZQUFZO0FBQUEsSUFDeEI7QUFBQSxFQUNGO0FBQUEsRUFJQSxNQUFNLFFBQVEsVUFBaUMsVUFBMEIsSUFBa0I7QUFDekYsVUFBTUEsVUFBUyxNQUFNLE9BQU8sd0JBQXVCO0FBRW5ELFVBQU1BLFFBQU87QUFFYixRQUFJLFVBQVU7QUFDWixhQUFPLElBQUlBLFFBQU8sUUFBUSxVQUFVLE9BQU87QUFBQSxJQUM3QztBQUVBLFdBQU9BO0FBQUFBLEVBQ1Q7QUFBQSxFQUlBLE1BQU0sWUFBWSxVQUFpQyxVQUE4QixJQUFrQjtBQUNqRyxVQUFNLElBQUksTUFBTSxPQUFPLDRCQUEyQjtBQUVsRCxVQUFNLEVBQUU7QUFFUixRQUFJLFVBQVU7QUFDWixhQUFPLEVBQUUsWUFBWSxPQUFPLFVBQVUsT0FBTztBQUFBLElBQy9DO0FBRUEsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLFFBQ0UsV0FBbUQsOEJBQ25ELFNBQW1DLENBQUEsR0FDeEI7QUFDWCxXQUFPO0FBQUEsTUFDTDtBQUFBLFFBQ0U7QUFBQSxRQUNBO0FBQUEsUUFDQSxDQUFDLFFBQVEsUUFBUSxvQkFBb0IsS0FBSyxNQUFNO0FBQUEsTUFBQTtBQUFBLElBQ2xEO0FBQUEsRUFFSjtBQUFBLEVBRUEsZ0JBQWdCQSxTQUFhO0FBQzNCLFdBQU8sT0FBT0EsUUFBTyxRQUFRLE1BQU0sR0FBRyxFQUFFLE9BQU87QUFBQSxFQUNqRDtBQUFBLEVBRUEsd0JBQXdCO0FBQ3RCLFdBQU8sWUFBWTtBQUFBLEVBQ3JCO0FBQ0Y7In0=
