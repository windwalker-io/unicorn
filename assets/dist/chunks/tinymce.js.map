{"version":3,"file":"tinymce.js","sources":["../../src/module/tinymce.ts"],"sourcesContent":["import type { Editor, EditorOptions, TinyMCE } from 'tinymce';\r\nimport { useHttpClient, useStack } from '../composable';\r\nimport { useImport, useScriptImport } from '../service';\r\nimport { Dictionary, MaybePromise } from '../types';\r\nimport { mergeDeep } from '../utilities';\r\n\r\nconst instances: Dictionary<TinymceController> = {};\r\nlet hooks: ((tinymce: TinyMCE) => MaybePromise<any>)[] = [];\r\n\r\nlet imported = false;\r\n\r\ndeclare type UploadHandlerParams = Parameters<NonNullable<EditorOptions['images_upload_handler']>>;\r\n\r\nexport async function get(\r\n  selector: string,\r\n  options: Record<string, any> = {}\r\n): Promise<TinymceController> {\r\n  return instances[selector] ??= await create(document.querySelector<HTMLElement>(selector)!, options);\r\n}\r\n\r\nexport async function create(\r\n  selector: string | HTMLElement,\r\n  options: Record<string, any> = {}\r\n): Promise<TinymceController> {\r\n  const tinymce = await loadTinymce();\r\n  let el: HTMLElement;\r\n\r\n  if (typeof selector === 'string') {\r\n    el = document.querySelector<HTMLElement>(selector)!;\r\n  } else {\r\n    el = selector;\r\n  }\r\n\r\n  return new TinymceController(tinymce, el, options);\r\n}\r\n\r\nexport function destroy(selector: string): void {\r\n  delete instances[selector];\r\n}\r\n\r\nexport function addHook(handler: ((tinymce: TinyMCE) => MaybePromise<any>)) {\r\n  hooks.push(handler);\r\n}\r\n\r\nexport function clearHooks() {\r\n  hooks = [];\r\n}\r\n\r\nasync function loadTinymce(): Promise<TinyMCE> {\r\n  if (imported) {\r\n    return tinymce;\r\n  }\r\n\r\n  await useScriptImport('@tinymce');\r\n\r\n  for (const hook of hooks) {\r\n    hook(tinymce);\r\n  }\r\n  await registerDragPlugin(tinymce);\r\n  imported = true;\r\n  return tinymce;\r\n}\r\n\r\nconst defaultOptions: Record<string, any> = {};\r\n\r\nexport class TinymceController {\r\n  editor?: Editor;\r\n  options: Record<string, any> = {};\r\n\r\n  constructor(protected tinymce: TinyMCE, public element: HTMLElement, options: Record<string, any>) {\r\n    options.target = element;\r\n\r\n    this.options = mergeDeep(\r\n      {\r\n        unicorn: {\r\n          stack_name: 'uploading'\r\n        }\r\n      },\r\n      defaultOptions,\r\n      this.prepareOptions(options, tinymce.majorVersion),\r\n    );\r\n\r\n    tinymce.EditorManager.init(this.options).then((editor) => {\r\n      this.editor = editor[0];\r\n    });\r\n  }\r\n\r\n  prepareOptions(options: Record<string, any>, version = '6') {\r\n    const defaults: Partial<EditorOptions> = {};\r\n\r\n    if (options.images_upload_url) {\r\n      defaults.paste_data_images = true;\r\n      defaults.remove_script_host = false;\r\n      defaults.relative_urls = false;\r\n\r\n      if (Number(version) >= 6) {\r\n        defaults.images_upload_handler = (blobInfo, progress) =>\r\n          this.imageUploadHandler(blobInfo, progress);\r\n      } else {\r\n        options.plugins.push('paste');\r\n\r\n        // @ts-ignore\r\n        defaults.images_upload_handler = (blobInfo, success, failure, progress) =>\r\n          this.imageUploadHandler(blobInfo, progress)\r\n            .then((url) => {\r\n              success(url);\r\n              return url;\r\n            })\r\n            .catch((e) => {\r\n              failure(e.message, { remove: true });\r\n              throw e;\r\n            });\r\n      }\r\n    }\r\n\r\n    // defaults.file_picker_callback = (...args) => this.filePickerCallback(...args);\r\n\r\n    defaults.plugins = defaults.plugins || [];\r\n\r\n    defaults.setup = (editor) => {\r\n      editor.on('change', () => {\r\n        this.tinymce.triggerSave();\r\n      });\r\n    };\r\n\r\n    options = mergeDeep({}, defaults, options);\r\n\r\n    if (options.plugins.indexOf('unicorndragdrop') === -1) {\r\n      options.plugins.push('unicorndragdrop');\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  insert(text: string) {\r\n    this.editor?.insertContent(text);\r\n  }\r\n\r\n  getValue(): string {\r\n    return this.editor?.getContent() ?? '';\r\n  }\r\n\r\n  setValue(text: string): void {\r\n    this.editor?.setContent(text);\r\n  }\r\n\r\n  // filePickerCallback(callback, value, meta) {\r\n  //   const input = document.createElement('input');\r\n  //   input.setAttribute('type', 'file');\r\n  //   input.style.display = 'none';\r\n  //\r\n  //   if (meta.filetype === 'image') {\r\n  //     input.setAttribute('accept', `image/\\*`);\r\n  //   }\r\n  //\r\n  //   document.body.appendChild(input);\r\n  //\r\n  //   input.onchange = function () {\r\n  //     const file = this.files[0];\r\n  //\r\n  //     const reader = new FileReader();\r\n  //     reader.onload = function () {\r\n  //       const id = 'blobid' + (new Date()).getTime();\r\n  //       const blobCache =  tinymce.activeEditor.editorUpload.blobCache;\r\n  //       const base64 = reader.result.split(',')[1];\r\n  //       const blobInfo = blobCache.create(id, file, base64);\r\n  //       blobCache.add(blobInfo);\r\n  //\r\n  //       /* call the callback and populate the Title field with the file name */\r\n  //       callback(blobInfo.blobUri(), { title: file.name, text: file.name });\r\n  //     };\r\n  //     reader.readAsDataURL(file);\r\n  //     input.remove();\r\n  //   };\r\n  //\r\n  //   input.click();\r\n  // }\r\n\r\n  async imageUploadHandler(blobInfo: UploadHandlerParams[0], progress: UploadHandlerParams[1]) {\r\n    const element = this.element;\r\n\r\n    element.dispatchEvent(new CustomEvent('upload-start'));\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', blobInfo.blob(), blobInfo.filename());\r\n\r\n    const stack = useStack(this.options.unicorn.stack_name);\r\n    stack.push(true);\r\n\r\n    const { post, isAxiosError } = await useHttpClient();\r\n\r\n    try {\r\n      let res = await post(\r\n        this.options.images_upload_url,\r\n        formData,\r\n        {\r\n          withCredentials: false,\r\n          onUploadProgress: (e) => {\r\n            progress(e.loaded / e.total! * 100);\r\n          }\r\n        }\r\n      );\r\n      element.dispatchEvent(new CustomEvent('upload-success'));\r\n\r\n      return res.data.data.url;\r\n    } catch (err) {\r\n      if (isAxiosError(err)) {\r\n        const message = err?.response?.data?.message || err.message;\r\n        console.error(err?.response?.data?.message || err.message, err);\r\n        element.dispatchEvent(new CustomEvent('upload-error', { detail: err }));\r\n\r\n        return Promise.reject({ message, remove: true });\r\n      }\r\n\r\n      throw err;\r\n    } finally {\r\n      element.dispatchEvent(new CustomEvent('upload-complete'));\r\n      stack.pop();\r\n    }\r\n  }\r\n}\r\n\r\nfunction registerDragPlugin(tinymce: TinyMCE) {\r\n  tinymce.PluginManager.add('unicorndragdrop', function (editor) {\r\n    // Reset the drop area border\r\n    tinymce.DOM.bind(document, 'dragleave', function (e) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n\r\n      if (tinymce.activeEditor) {\r\n        tinymce.activeEditor.contentAreaContainer.style.transition = 'all .3s';\r\n        tinymce.activeEditor.contentAreaContainer.style.borderWidth = '';\r\n      }\r\n\r\n      return false;\r\n    });\r\n\r\n    if (typeof FormData !== 'undefined') {\r\n\r\n      // Fix for Chrome\r\n      editor.on('dragenter', e => {\r\n        e.stopPropagation();\r\n        return false;\r\n      });\r\n\r\n      // Notify user when file is over the drop area\r\n      editor.on('dragover', e => {\r\n        e.preventDefault();\r\n\r\n        if (tinymce.activeEditor) {\r\n          tinymce.activeEditor.contentAreaContainer.style.transition = 'all .3s';\r\n          tinymce.activeEditor.contentAreaContainer.style.border = '3px dashed rgba(0, 0, 0, .35)';\r\n        }\r\n\r\n        return false;\r\n      });\r\n\r\n      editor.on('drop', e => {\r\n        editor.contentAreaContainer.style.borderWidth = '';\r\n        editor.contentAreaContainer.style.borderWidth = '';\r\n      });\r\n    }\r\n  });\r\n\r\n  return Promise.resolve();\r\n}\r\n\r\nexport interface TinymceModule {\r\n  get: typeof get;\r\n  create: typeof create;\r\n  destroy: typeof destroy;\r\n  addHook: typeof addHook;\r\n  clearHooks: typeof clearHooks;\r\n  TinymceController: typeof TinymceController;\r\n}\r\n\r\ndeclare global {\r\n  var tinymce: TinyMCE;\r\n}\r\n"],"names":["tinymce"],"mappings":";AAMA,MAAM,YAA2C,CAAA;AACjD,IAAI,QAAqD,CAAA;AAEzD,IAAI,WAAW;AAIf,eAAsB,IACpB,UACA,UAA+B,IACH;AAC5B,SAAO,UAAU,QAAQ,MAAM,MAAM,OAAO,SAAS,cAA2B,QAAQ,GAAI,OAAO;AACrG;AAEA,eAAsB,OACpB,UACA,UAA+B,IACH;AAC5B,QAAMA,WAAU,MAAM,YAAA;AACtB,MAAI;AAEJ,MAAI,OAAO,aAAa,UAAU;AAChC,SAAK,SAAS,cAA2B,QAAQ;AAAA,EACnD,OAAO;AACL,SAAK;AAAA,EACP;AAEA,SAAO,IAAI,kBAAkBA,UAAS,IAAI,OAAO;AACnD;AAEO,SAAS,QAAQ,UAAwB;AAC9C,SAAO,UAAU,QAAQ;AAC3B;AAEO,SAAS,QAAQ,SAAoD;AAC1E,QAAM,KAAK,OAAO;AACpB;AAEO,SAAS,aAAa;AAC3B,UAAQ,CAAA;AACV;AAEA,eAAe,cAAgC;AAC7C,MAAI,UAAU;AACZ,WAAO;AAAA,EACT;AAEA,QAAM,gBAAgB,UAAU;AAEhC,aAAW,QAAQ,OAAO;AACxB,SAAK,OAAO;AAAA,EACd;AACA,QAAM,mBAAmB,OAAO;AAChC,aAAW;AACX,SAAO;AACT;AAEA,MAAM,iBAAsC,CAAA;AAErC,MAAM,kBAAkB;AAAA,EAI7B,YAAsBA,UAAyB,SAAsB,SAA8B;AAA7E,SAAA,UAAAA;AAAyB,SAAA,UAAA;AAC7C,YAAQ,SAAS;AAEjB,SAAK,UAAU;AAAA,MACb;AAAA,QACE,SAAS;AAAA,UACP,YAAY;AAAA,QAAA;AAAA,MACd;AAAA,MAEF;AAAA,MACA,KAAK,eAAe,SAASA,SAAQ,YAAY;AAAA,IAAA;AAGnDA,aAAQ,cAAc,KAAK,KAAK,OAAO,EAAE,KAAK,CAAC,WAAW;AACxD,WAAK,SAAS,OAAO,CAAC;AAAA,IACxB,CAAC;AAAA,EACH;AAAA,EAnBA;AAAA,EACA,UAA+B,CAAA;AAAA,EAoB/B,eAAe,SAA8B,UAAU,KAAK;AAC1D,UAAM,WAAmC,CAAA;AAEzC,QAAI,QAAQ,mBAAmB;AAC7B,eAAS,oBAAoB;AAC7B,eAAS,qBAAqB;AAC9B,eAAS,gBAAgB;AAEzB,UAAI,OAAO,OAAO,KAAK,GAAG;AACxB,iBAAS,wBAAwB,CAAC,UAAU,aAC1C,KAAK,mBAAmB,UAAU,QAAQ;AAAA,MAC9C,OAAO;AACL,gBAAQ,QAAQ,KAAK,OAAO;AAG5B,iBAAS,wBAAwB,CAAC,UAAU,SAAS,SAAS,aAC5D,KAAK,mBAAmB,UAAU,QAAQ,EACvC,KAAK,CAAC,QAAQ;AACb,kBAAQ,GAAG;AACX,iBAAO;AAAA,QACT,CAAC,EACA,MAAM,CAAC,MAAM;AACZ,kBAAQ,EAAE,SAAS,EAAE,QAAQ,MAAM;AACnC,gBAAM;AAAA,QACR,CAAC;AAAA,MACP;AAAA,IACF;AAIA,aAAS,UAAU,SAAS,WAAW,CAAA;AAEvC,aAAS,QAAQ,CAAC,WAAW;AAC3B,aAAO,GAAG,UAAU,MAAM;AACxB,aAAK,QAAQ,YAAA;AAAA,MACf,CAAC;AAAA,IACH;AAEA,cAAU,UAAU,IAAI,UAAU,OAAO;AAEzC,QAAI,QAAQ,QAAQ,QAAQ,iBAAiB,MAAM,IAAI;AACrD,cAAQ,QAAQ,KAAK,iBAAiB;AAAA,IACxC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,MAAc;AACnB,SAAK,QAAQ,cAAc,IAAI;AAAA,EACjC;AAAA,EAEA,WAAmB;AACjB,WAAO,KAAK,QAAQ,WAAA,KAAgB;AAAA,EACtC;AAAA,EAEA,SAAS,MAAoB;AAC3B,SAAK,QAAQ,WAAW,IAAI;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkCA,MAAM,mBAAmB,UAAkC,UAAkC;AAC3F,UAAM,UAAU,KAAK;AAErB,YAAQ,cAAc,IAAI,YAAY,cAAc,CAAC;AAErD,UAAM,WAAW,IAAI,SAAA;AACrB,aAAS,OAAO,QAAQ,SAAS,QAAQ,SAAS,UAAU;AAE5D,UAAM,QAAQ,SAAS,KAAK,QAAQ,QAAQ,UAAU;AACtD,UAAM,KAAK,IAAI;AAEf,UAAM,EAAE,MAAM,aAAA,IAAiB,MAAM,cAAA;AAErC,QAAI;AACF,UAAI,MAAM,MAAM;AAAA,QACd,KAAK,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,UACE,iBAAiB;AAAA,UACjB,kBAAkB,CAAC,MAAM;AACvB,qBAAS,EAAE,SAAS,EAAE,QAAS,GAAG;AAAA,UACpC;AAAA,QAAA;AAAA,MACF;AAEF,cAAQ,cAAc,IAAI,YAAY,gBAAgB,CAAC;AAEvD,aAAO,IAAI,KAAK,KAAK;AAAA,IACvB,SAAS,KAAK;AACZ,UAAI,aAAa,GAAG,GAAG;AACrB,cAAM,UAAU,KAAK,UAAU,MAAM,WAAW,IAAI;AACpD,gBAAQ,MAAM,KAAK,UAAU,MAAM,WAAW,IAAI,SAAS,GAAG;AAC9D,gBAAQ,cAAc,IAAI,YAAY,gBAAgB,EAAE,QAAQ,IAAA,CAAK,CAAC;AAEtE,eAAO,QAAQ,OAAO,EAAE,SAAS,QAAQ,MAAM;AAAA,MACjD;AAEA,YAAM;AAAA,IACR,UAAA;AACE,cAAQ,cAAc,IAAI,YAAY,iBAAiB,CAAC;AACxD,YAAM,IAAA;AAAA,IACR;AAAA,EACF;AACF;AAEA,SAAS,mBAAmBA,UAAkB;AAC5CA,WAAQ,cAAc,IAAI,mBAAmB,SAAU,QAAQ;AAE7DA,aAAQ,IAAI,KAAK,UAAU,aAAa,SAAU,GAAG;AACnD,QAAE,gBAAA;AACF,QAAE,eAAA;AAEF,UAAIA,SAAQ,cAAc;AACxBA,iBAAQ,aAAa,qBAAqB,MAAM,aAAa;AAC7DA,iBAAQ,aAAa,qBAAqB,MAAM,cAAc;AAAA,MAChE;AAEA,aAAO;AAAA,IACT,CAAC;AAED,QAAI,OAAO,aAAa,aAAa;AAGnC,aAAO,GAAG,aAAa,CAAA,MAAK;AAC1B,UAAE,gBAAA;AACF,eAAO;AAAA,MACT,CAAC;AAGD,aAAO,GAAG,YAAY,CAAA,MAAK;AACzB,UAAE,eAAA;AAEF,YAAIA,SAAQ,cAAc;AACxBA,mBAAQ,aAAa,qBAAqB,MAAM,aAAa;AAC7DA,mBAAQ,aAAa,qBAAqB,MAAM,SAAS;AAAA,QAC3D;AAEA,eAAO;AAAA,MACT,CAAC;AAED,aAAO,GAAG,QAAQ,CAAA,MAAK;AACrB,eAAO,qBAAqB,MAAM,cAAc;AAChD,eAAO,qBAAqB,MAAM,cAAc;AAAA,MAClD,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAED,SAAO,QAAQ,QAAA;AACjB;"}